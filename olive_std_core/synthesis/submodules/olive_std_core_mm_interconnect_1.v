// olive_std_core_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 602

`timescale 1 ps / 1 ps
module olive_std_core_mm_interconnect_1 (
		input  wire        peri_clk_clk_clk,                                       //                                     peri_clk_clk.clk
		input  wire        peripheral_bridge_m0_reset_reset_bridge_in_reset_reset, // peripheral_bridge_m0_reset_reset_bridge_in_reset.reset
		input  wire [8:0]  peripheral_bridge_m0_address,                           //                             peripheral_bridge_m0.address
		output wire        peripheral_bridge_m0_waitrequest,                       //                                                 .waitrequest
		input  wire [0:0]  peripheral_bridge_m0_burstcount,                        //                                                 .burstcount
		input  wire [3:0]  peripheral_bridge_m0_byteenable,                        //                                                 .byteenable
		input  wire        peripheral_bridge_m0_read,                              //                                                 .read
		output wire [31:0] peripheral_bridge_m0_readdata,                          //                                                 .readdata
		output wire        peripheral_bridge_m0_readdatavalid,                     //                                                 .readdatavalid
		input  wire        peripheral_bridge_m0_write,                             //                                                 .write
		input  wire [31:0] peripheral_bridge_m0_writedata,                         //                                                 .writedata
		input  wire        peripheral_bridge_m0_debugaccess,                       //                                                 .debugaccess
		output wire [0:0]  chipid_chipid_address,                                  //                                    chipid_chipid.address
		output wire        chipid_chipid_read,                                     //                                                 .read
		input  wire [31:0] chipid_chipid_readdata,                                 //                                                 .readdata
		input  wire        chipid_chipid_waitrequest,                              //                                                 .waitrequest
		output wire [2:0]  dual_boot_0_avalon_address,                             //                               dual_boot_0_avalon.address
		output wire        dual_boot_0_avalon_write,                               //                                                 .write
		output wire        dual_boot_0_avalon_read,                                //                                                 .read
		input  wire [31:0] dual_boot_0_avalon_readdata,                            //                                                 .readdata
		output wire [31:0] dual_boot_0_avalon_writedata,                           //                                                 .writedata
		output wire [1:0]  hostbridge_s1_address,                                  //                                    hostbridge_s1.address
		output wire        hostbridge_s1_write,                                    //                                                 .write
		output wire        hostbridge_s1_read,                                     //                                                 .read
		input  wire [15:0] hostbridge_s1_readdata,                                 //                                                 .readdata
		output wire [15:0] hostbridge_s1_writedata,                                //                                                 .writedata
		output wire [0:0]  i2c_s1_address,                                         //                                           i2c_s1.address
		output wire        i2c_s1_write,                                           //                                                 .write
		output wire        i2c_s1_read,                                            //                                                 .read
		input  wire [31:0] i2c_s1_readdata,                                        //                                                 .readdata
		output wire [31:0] i2c_s1_writedata,                                       //                                                 .writedata
		output wire [1:0]  led_s1_address,                                         //                                           led_s1.address
		output wire        led_s1_write,                                           //                                                 .write
		input  wire [31:0] led_s1_readdata,                                        //                                                 .readdata
		output wire [31:0] led_s1_writedata,                                       //                                                 .writedata
		output wire        led_s1_chipselect,                                      //                                                 .chipselect
		output wire [3:0]  pfc_avalon_slave_address,                               //                                 pfc_avalon_slave.address
		output wire        pfc_avalon_slave_write,                                 //                                                 .write
		output wire        pfc_avalon_slave_read,                                  //                                                 .read
		input  wire [31:0] pfc_avalon_slave_readdata,                              //                                                 .readdata
		output wire [31:0] pfc_avalon_slave_writedata,                             //                                                 .writedata
		output wire [4:0]  servo_avalon_slave_address,                             //                               servo_avalon_slave.address
		output wire        servo_avalon_slave_write,                               //                                                 .write
		output wire        servo_avalon_slave_read,                                //                                                 .read
		input  wire [31:0] servo_avalon_slave_readdata,                            //                                                 .readdata
		output wire [31:0] servo_avalon_slave_writedata,                           //                                                 .writedata
		output wire [0:0]  spi_s1_address,                                         //                                           spi_s1.address
		output wire        spi_s1_write,                                           //                                                 .write
		output wire        spi_s1_read,                                            //                                                 .read
		input  wire [31:0] spi_s1_readdata,                                        //                                                 .readdata
		output wire [31:0] spi_s1_writedata,                                       //                                                 .writedata
		output wire [0:0]  sysid_control_slave_address,                            //                              sysid_control_slave.address
		input  wire [31:0] sysid_control_slave_readdata,                           //                                                 .readdata
		output wire [2:0]  systimer_s1_address,                                    //                                      systimer_s1.address
		output wire        systimer_s1_write,                                      //                                                 .write
		input  wire [15:0] systimer_s1_readdata,                                   //                                                 .readdata
		output wire [15:0] systimer_s1_writedata,                                  //                                                 .writedata
		output wire        systimer_s1_chipselect,                                 //                                                 .chipselect
		output wire [2:0]  uart0_s1_address,                                       //                                         uart0_s1.address
		output wire        uart0_s1_write,                                         //                                                 .write
		output wire        uart0_s1_read,                                          //                                                 .read
		input  wire [15:0] uart0_s1_readdata,                                      //                                                 .readdata
		output wire [15:0] uart0_s1_writedata,                                     //                                                 .writedata
		output wire        uart0_s1_begintransfer,                                 //                                                 .begintransfer
		output wire        uart0_s1_chipselect,                                    //                                                 .chipselect
		output wire [2:0]  uart1_s1_address,                                       //                                         uart1_s1.address
		output wire        uart1_s1_write,                                         //                                                 .write
		output wire        uart1_s1_read,                                          //                                                 .read
		input  wire [15:0] uart1_s1_readdata,                                      //                                                 .readdata
		output wire [15:0] uart1_s1_writedata,                                     //                                                 .writedata
		output wire        uart1_s1_begintransfer,                                 //                                                 .begintransfer
		output wire        uart1_s1_chipselect                                     //                                                 .chipselect
	);

	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest;   // peripheral_bridge_m0_agent:av_waitrequest -> peripheral_bridge_m0_translator:uav_waitrequest
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_readdata;      // peripheral_bridge_m0_agent:av_readdata -> peripheral_bridge_m0_translator:uav_readdata
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess;   // peripheral_bridge_m0_translator:uav_debugaccess -> peripheral_bridge_m0_agent:av_debugaccess
	wire   [8:0] peripheral_bridge_m0_translator_avalon_universal_master_0_address;       // peripheral_bridge_m0_translator:uav_address -> peripheral_bridge_m0_agent:av_address
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_read;          // peripheral_bridge_m0_translator:uav_read -> peripheral_bridge_m0_agent:av_read
	wire   [3:0] peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable;    // peripheral_bridge_m0_translator:uav_byteenable -> peripheral_bridge_m0_agent:av_byteenable
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid; // peripheral_bridge_m0_agent:av_readdatavalid -> peripheral_bridge_m0_translator:uav_readdatavalid
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_lock;          // peripheral_bridge_m0_translator:uav_lock -> peripheral_bridge_m0_agent:av_lock
	wire         peripheral_bridge_m0_translator_avalon_universal_master_0_write;         // peripheral_bridge_m0_translator:uav_write -> peripheral_bridge_m0_agent:av_write
	wire  [31:0] peripheral_bridge_m0_translator_avalon_universal_master_0_writedata;     // peripheral_bridge_m0_translator:uav_writedata -> peripheral_bridge_m0_agent:av_writedata
	wire   [2:0] peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount;    // peripheral_bridge_m0_translator:uav_burstcount -> peripheral_bridge_m0_agent:av_burstcount
	wire  [31:0] dual_boot_0_avalon_agent_m0_readdata;                                    // dual_boot_0_avalon_translator:uav_readdata -> dual_boot_0_avalon_agent:m0_readdata
	wire         dual_boot_0_avalon_agent_m0_waitrequest;                                 // dual_boot_0_avalon_translator:uav_waitrequest -> dual_boot_0_avalon_agent:m0_waitrequest
	wire         dual_boot_0_avalon_agent_m0_debugaccess;                                 // dual_boot_0_avalon_agent:m0_debugaccess -> dual_boot_0_avalon_translator:uav_debugaccess
	wire   [8:0] dual_boot_0_avalon_agent_m0_address;                                     // dual_boot_0_avalon_agent:m0_address -> dual_boot_0_avalon_translator:uav_address
	wire   [3:0] dual_boot_0_avalon_agent_m0_byteenable;                                  // dual_boot_0_avalon_agent:m0_byteenable -> dual_boot_0_avalon_translator:uav_byteenable
	wire         dual_boot_0_avalon_agent_m0_read;                                        // dual_boot_0_avalon_agent:m0_read -> dual_boot_0_avalon_translator:uav_read
	wire         dual_boot_0_avalon_agent_m0_readdatavalid;                               // dual_boot_0_avalon_translator:uav_readdatavalid -> dual_boot_0_avalon_agent:m0_readdatavalid
	wire         dual_boot_0_avalon_agent_m0_lock;                                        // dual_boot_0_avalon_agent:m0_lock -> dual_boot_0_avalon_translator:uav_lock
	wire  [31:0] dual_boot_0_avalon_agent_m0_writedata;                                   // dual_boot_0_avalon_agent:m0_writedata -> dual_boot_0_avalon_translator:uav_writedata
	wire         dual_boot_0_avalon_agent_m0_write;                                       // dual_boot_0_avalon_agent:m0_write -> dual_boot_0_avalon_translator:uav_write
	wire   [2:0] dual_boot_0_avalon_agent_m0_burstcount;                                  // dual_boot_0_avalon_agent:m0_burstcount -> dual_boot_0_avalon_translator:uav_burstcount
	wire         dual_boot_0_avalon_agent_rf_source_valid;                                // dual_boot_0_avalon_agent:rf_source_valid -> dual_boot_0_avalon_agent_rsp_fifo:in_valid
	wire  [85:0] dual_boot_0_avalon_agent_rf_source_data;                                 // dual_boot_0_avalon_agent:rf_source_data -> dual_boot_0_avalon_agent_rsp_fifo:in_data
	wire         dual_boot_0_avalon_agent_rf_source_ready;                                // dual_boot_0_avalon_agent_rsp_fifo:in_ready -> dual_boot_0_avalon_agent:rf_source_ready
	wire         dual_boot_0_avalon_agent_rf_source_startofpacket;                        // dual_boot_0_avalon_agent:rf_source_startofpacket -> dual_boot_0_avalon_agent_rsp_fifo:in_startofpacket
	wire         dual_boot_0_avalon_agent_rf_source_endofpacket;                          // dual_boot_0_avalon_agent:rf_source_endofpacket -> dual_boot_0_avalon_agent_rsp_fifo:in_endofpacket
	wire         dual_boot_0_avalon_agent_rsp_fifo_out_valid;                             // dual_boot_0_avalon_agent_rsp_fifo:out_valid -> dual_boot_0_avalon_agent:rf_sink_valid
	wire  [85:0] dual_boot_0_avalon_agent_rsp_fifo_out_data;                              // dual_boot_0_avalon_agent_rsp_fifo:out_data -> dual_boot_0_avalon_agent:rf_sink_data
	wire         dual_boot_0_avalon_agent_rsp_fifo_out_ready;                             // dual_boot_0_avalon_agent:rf_sink_ready -> dual_boot_0_avalon_agent_rsp_fifo:out_ready
	wire         dual_boot_0_avalon_agent_rsp_fifo_out_startofpacket;                     // dual_boot_0_avalon_agent_rsp_fifo:out_startofpacket -> dual_boot_0_avalon_agent:rf_sink_startofpacket
	wire         dual_boot_0_avalon_agent_rsp_fifo_out_endofpacket;                       // dual_boot_0_avalon_agent_rsp_fifo:out_endofpacket -> dual_boot_0_avalon_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                       // cmd_mux:src_valid -> dual_boot_0_avalon_agent:cp_valid
	wire  [84:0] cmd_mux_src_data;                                                        // cmd_mux:src_data -> dual_boot_0_avalon_agent:cp_data
	wire         cmd_mux_src_ready;                                                       // dual_boot_0_avalon_agent:cp_ready -> cmd_mux:src_ready
	wire  [11:0] cmd_mux_src_channel;                                                     // cmd_mux:src_channel -> dual_boot_0_avalon_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                               // cmd_mux:src_startofpacket -> dual_boot_0_avalon_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                 // cmd_mux:src_endofpacket -> dual_boot_0_avalon_agent:cp_endofpacket
	wire  [31:0] pfc_avalon_slave_agent_m0_readdata;                                      // pfc_avalon_slave_translator:uav_readdata -> pfc_avalon_slave_agent:m0_readdata
	wire         pfc_avalon_slave_agent_m0_waitrequest;                                   // pfc_avalon_slave_translator:uav_waitrequest -> pfc_avalon_slave_agent:m0_waitrequest
	wire         pfc_avalon_slave_agent_m0_debugaccess;                                   // pfc_avalon_slave_agent:m0_debugaccess -> pfc_avalon_slave_translator:uav_debugaccess
	wire   [8:0] pfc_avalon_slave_agent_m0_address;                                       // pfc_avalon_slave_agent:m0_address -> pfc_avalon_slave_translator:uav_address
	wire   [3:0] pfc_avalon_slave_agent_m0_byteenable;                                    // pfc_avalon_slave_agent:m0_byteenable -> pfc_avalon_slave_translator:uav_byteenable
	wire         pfc_avalon_slave_agent_m0_read;                                          // pfc_avalon_slave_agent:m0_read -> pfc_avalon_slave_translator:uav_read
	wire         pfc_avalon_slave_agent_m0_readdatavalid;                                 // pfc_avalon_slave_translator:uav_readdatavalid -> pfc_avalon_slave_agent:m0_readdatavalid
	wire         pfc_avalon_slave_agent_m0_lock;                                          // pfc_avalon_slave_agent:m0_lock -> pfc_avalon_slave_translator:uav_lock
	wire  [31:0] pfc_avalon_slave_agent_m0_writedata;                                     // pfc_avalon_slave_agent:m0_writedata -> pfc_avalon_slave_translator:uav_writedata
	wire         pfc_avalon_slave_agent_m0_write;                                         // pfc_avalon_slave_agent:m0_write -> pfc_avalon_slave_translator:uav_write
	wire   [2:0] pfc_avalon_slave_agent_m0_burstcount;                                    // pfc_avalon_slave_agent:m0_burstcount -> pfc_avalon_slave_translator:uav_burstcount
	wire         pfc_avalon_slave_agent_rf_source_valid;                                  // pfc_avalon_slave_agent:rf_source_valid -> pfc_avalon_slave_agent_rsp_fifo:in_valid
	wire  [85:0] pfc_avalon_slave_agent_rf_source_data;                                   // pfc_avalon_slave_agent:rf_source_data -> pfc_avalon_slave_agent_rsp_fifo:in_data
	wire         pfc_avalon_slave_agent_rf_source_ready;                                  // pfc_avalon_slave_agent_rsp_fifo:in_ready -> pfc_avalon_slave_agent:rf_source_ready
	wire         pfc_avalon_slave_agent_rf_source_startofpacket;                          // pfc_avalon_slave_agent:rf_source_startofpacket -> pfc_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         pfc_avalon_slave_agent_rf_source_endofpacket;                            // pfc_avalon_slave_agent:rf_source_endofpacket -> pfc_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         pfc_avalon_slave_agent_rsp_fifo_out_valid;                               // pfc_avalon_slave_agent_rsp_fifo:out_valid -> pfc_avalon_slave_agent:rf_sink_valid
	wire  [85:0] pfc_avalon_slave_agent_rsp_fifo_out_data;                                // pfc_avalon_slave_agent_rsp_fifo:out_data -> pfc_avalon_slave_agent:rf_sink_data
	wire         pfc_avalon_slave_agent_rsp_fifo_out_ready;                               // pfc_avalon_slave_agent:rf_sink_ready -> pfc_avalon_slave_agent_rsp_fifo:out_ready
	wire         pfc_avalon_slave_agent_rsp_fifo_out_startofpacket;                       // pfc_avalon_slave_agent_rsp_fifo:out_startofpacket -> pfc_avalon_slave_agent:rf_sink_startofpacket
	wire         pfc_avalon_slave_agent_rsp_fifo_out_endofpacket;                         // pfc_avalon_slave_agent_rsp_fifo:out_endofpacket -> pfc_avalon_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                   // cmd_mux_001:src_valid -> pfc_avalon_slave_agent:cp_valid
	wire  [84:0] cmd_mux_001_src_data;                                                    // cmd_mux_001:src_data -> pfc_avalon_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                   // pfc_avalon_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire  [11:0] cmd_mux_001_src_channel;                                                 // cmd_mux_001:src_channel -> pfc_avalon_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                           // cmd_mux_001:src_startofpacket -> pfc_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                             // cmd_mux_001:src_endofpacket -> pfc_avalon_slave_agent:cp_endofpacket
	wire  [31:0] servo_avalon_slave_agent_m0_readdata;                                    // servo_avalon_slave_translator:uav_readdata -> servo_avalon_slave_agent:m0_readdata
	wire         servo_avalon_slave_agent_m0_waitrequest;                                 // servo_avalon_slave_translator:uav_waitrequest -> servo_avalon_slave_agent:m0_waitrequest
	wire         servo_avalon_slave_agent_m0_debugaccess;                                 // servo_avalon_slave_agent:m0_debugaccess -> servo_avalon_slave_translator:uav_debugaccess
	wire   [8:0] servo_avalon_slave_agent_m0_address;                                     // servo_avalon_slave_agent:m0_address -> servo_avalon_slave_translator:uav_address
	wire   [3:0] servo_avalon_slave_agent_m0_byteenable;                                  // servo_avalon_slave_agent:m0_byteenable -> servo_avalon_slave_translator:uav_byteenable
	wire         servo_avalon_slave_agent_m0_read;                                        // servo_avalon_slave_agent:m0_read -> servo_avalon_slave_translator:uav_read
	wire         servo_avalon_slave_agent_m0_readdatavalid;                               // servo_avalon_slave_translator:uav_readdatavalid -> servo_avalon_slave_agent:m0_readdatavalid
	wire         servo_avalon_slave_agent_m0_lock;                                        // servo_avalon_slave_agent:m0_lock -> servo_avalon_slave_translator:uav_lock
	wire  [31:0] servo_avalon_slave_agent_m0_writedata;                                   // servo_avalon_slave_agent:m0_writedata -> servo_avalon_slave_translator:uav_writedata
	wire         servo_avalon_slave_agent_m0_write;                                       // servo_avalon_slave_agent:m0_write -> servo_avalon_slave_translator:uav_write
	wire   [2:0] servo_avalon_slave_agent_m0_burstcount;                                  // servo_avalon_slave_agent:m0_burstcount -> servo_avalon_slave_translator:uav_burstcount
	wire         servo_avalon_slave_agent_rf_source_valid;                                // servo_avalon_slave_agent:rf_source_valid -> servo_avalon_slave_agent_rsp_fifo:in_valid
	wire  [85:0] servo_avalon_slave_agent_rf_source_data;                                 // servo_avalon_slave_agent:rf_source_data -> servo_avalon_slave_agent_rsp_fifo:in_data
	wire         servo_avalon_slave_agent_rf_source_ready;                                // servo_avalon_slave_agent_rsp_fifo:in_ready -> servo_avalon_slave_agent:rf_source_ready
	wire         servo_avalon_slave_agent_rf_source_startofpacket;                        // servo_avalon_slave_agent:rf_source_startofpacket -> servo_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire         servo_avalon_slave_agent_rf_source_endofpacket;                          // servo_avalon_slave_agent:rf_source_endofpacket -> servo_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         servo_avalon_slave_agent_rsp_fifo_out_valid;                             // servo_avalon_slave_agent_rsp_fifo:out_valid -> servo_avalon_slave_agent:rf_sink_valid
	wire  [85:0] servo_avalon_slave_agent_rsp_fifo_out_data;                              // servo_avalon_slave_agent_rsp_fifo:out_data -> servo_avalon_slave_agent:rf_sink_data
	wire         servo_avalon_slave_agent_rsp_fifo_out_ready;                             // servo_avalon_slave_agent:rf_sink_ready -> servo_avalon_slave_agent_rsp_fifo:out_ready
	wire         servo_avalon_slave_agent_rsp_fifo_out_startofpacket;                     // servo_avalon_slave_agent_rsp_fifo:out_startofpacket -> servo_avalon_slave_agent:rf_sink_startofpacket
	wire         servo_avalon_slave_agent_rsp_fifo_out_endofpacket;                       // servo_avalon_slave_agent_rsp_fifo:out_endofpacket -> servo_avalon_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                   // cmd_mux_002:src_valid -> servo_avalon_slave_agent:cp_valid
	wire  [84:0] cmd_mux_002_src_data;                                                    // cmd_mux_002:src_data -> servo_avalon_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                   // servo_avalon_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire  [11:0] cmd_mux_002_src_channel;                                                 // cmd_mux_002:src_channel -> servo_avalon_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                           // cmd_mux_002:src_startofpacket -> servo_avalon_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                             // cmd_mux_002:src_endofpacket -> servo_avalon_slave_agent:cp_endofpacket
	wire  [31:0] chipid_chipid_agent_m0_readdata;                                         // chipid_chipid_translator:uav_readdata -> chipid_chipid_agent:m0_readdata
	wire         chipid_chipid_agent_m0_waitrequest;                                      // chipid_chipid_translator:uav_waitrequest -> chipid_chipid_agent:m0_waitrequest
	wire         chipid_chipid_agent_m0_debugaccess;                                      // chipid_chipid_agent:m0_debugaccess -> chipid_chipid_translator:uav_debugaccess
	wire   [8:0] chipid_chipid_agent_m0_address;                                          // chipid_chipid_agent:m0_address -> chipid_chipid_translator:uav_address
	wire   [3:0] chipid_chipid_agent_m0_byteenable;                                       // chipid_chipid_agent:m0_byteenable -> chipid_chipid_translator:uav_byteenable
	wire         chipid_chipid_agent_m0_read;                                             // chipid_chipid_agent:m0_read -> chipid_chipid_translator:uav_read
	wire         chipid_chipid_agent_m0_readdatavalid;                                    // chipid_chipid_translator:uav_readdatavalid -> chipid_chipid_agent:m0_readdatavalid
	wire         chipid_chipid_agent_m0_lock;                                             // chipid_chipid_agent:m0_lock -> chipid_chipid_translator:uav_lock
	wire  [31:0] chipid_chipid_agent_m0_writedata;                                        // chipid_chipid_agent:m0_writedata -> chipid_chipid_translator:uav_writedata
	wire         chipid_chipid_agent_m0_write;                                            // chipid_chipid_agent:m0_write -> chipid_chipid_translator:uav_write
	wire   [2:0] chipid_chipid_agent_m0_burstcount;                                       // chipid_chipid_agent:m0_burstcount -> chipid_chipid_translator:uav_burstcount
	wire         chipid_chipid_agent_rf_source_valid;                                     // chipid_chipid_agent:rf_source_valid -> chipid_chipid_agent_rsp_fifo:in_valid
	wire  [85:0] chipid_chipid_agent_rf_source_data;                                      // chipid_chipid_agent:rf_source_data -> chipid_chipid_agent_rsp_fifo:in_data
	wire         chipid_chipid_agent_rf_source_ready;                                     // chipid_chipid_agent_rsp_fifo:in_ready -> chipid_chipid_agent:rf_source_ready
	wire         chipid_chipid_agent_rf_source_startofpacket;                             // chipid_chipid_agent:rf_source_startofpacket -> chipid_chipid_agent_rsp_fifo:in_startofpacket
	wire         chipid_chipid_agent_rf_source_endofpacket;                               // chipid_chipid_agent:rf_source_endofpacket -> chipid_chipid_agent_rsp_fifo:in_endofpacket
	wire         chipid_chipid_agent_rsp_fifo_out_valid;                                  // chipid_chipid_agent_rsp_fifo:out_valid -> chipid_chipid_agent:rf_sink_valid
	wire  [85:0] chipid_chipid_agent_rsp_fifo_out_data;                                   // chipid_chipid_agent_rsp_fifo:out_data -> chipid_chipid_agent:rf_sink_data
	wire         chipid_chipid_agent_rsp_fifo_out_ready;                                  // chipid_chipid_agent:rf_sink_ready -> chipid_chipid_agent_rsp_fifo:out_ready
	wire         chipid_chipid_agent_rsp_fifo_out_startofpacket;                          // chipid_chipid_agent_rsp_fifo:out_startofpacket -> chipid_chipid_agent:rf_sink_startofpacket
	wire         chipid_chipid_agent_rsp_fifo_out_endofpacket;                            // chipid_chipid_agent_rsp_fifo:out_endofpacket -> chipid_chipid_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                   // cmd_mux_003:src_valid -> chipid_chipid_agent:cp_valid
	wire  [84:0] cmd_mux_003_src_data;                                                    // cmd_mux_003:src_data -> chipid_chipid_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                   // chipid_chipid_agent:cp_ready -> cmd_mux_003:src_ready
	wire  [11:0] cmd_mux_003_src_channel;                                                 // cmd_mux_003:src_channel -> chipid_chipid_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                           // cmd_mux_003:src_startofpacket -> chipid_chipid_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                             // cmd_mux_003:src_endofpacket -> chipid_chipid_agent:cp_endofpacket
	wire  [31:0] sysid_control_slave_agent_m0_readdata;                                   // sysid_control_slave_translator:uav_readdata -> sysid_control_slave_agent:m0_readdata
	wire         sysid_control_slave_agent_m0_waitrequest;                                // sysid_control_slave_translator:uav_waitrequest -> sysid_control_slave_agent:m0_waitrequest
	wire         sysid_control_slave_agent_m0_debugaccess;                                // sysid_control_slave_agent:m0_debugaccess -> sysid_control_slave_translator:uav_debugaccess
	wire   [8:0] sysid_control_slave_agent_m0_address;                                    // sysid_control_slave_agent:m0_address -> sysid_control_slave_translator:uav_address
	wire   [3:0] sysid_control_slave_agent_m0_byteenable;                                 // sysid_control_slave_agent:m0_byteenable -> sysid_control_slave_translator:uav_byteenable
	wire         sysid_control_slave_agent_m0_read;                                       // sysid_control_slave_agent:m0_read -> sysid_control_slave_translator:uav_read
	wire         sysid_control_slave_agent_m0_readdatavalid;                              // sysid_control_slave_translator:uav_readdatavalid -> sysid_control_slave_agent:m0_readdatavalid
	wire         sysid_control_slave_agent_m0_lock;                                       // sysid_control_slave_agent:m0_lock -> sysid_control_slave_translator:uav_lock
	wire  [31:0] sysid_control_slave_agent_m0_writedata;                                  // sysid_control_slave_agent:m0_writedata -> sysid_control_slave_translator:uav_writedata
	wire         sysid_control_slave_agent_m0_write;                                      // sysid_control_slave_agent:m0_write -> sysid_control_slave_translator:uav_write
	wire   [2:0] sysid_control_slave_agent_m0_burstcount;                                 // sysid_control_slave_agent:m0_burstcount -> sysid_control_slave_translator:uav_burstcount
	wire         sysid_control_slave_agent_rf_source_valid;                               // sysid_control_slave_agent:rf_source_valid -> sysid_control_slave_agent_rsp_fifo:in_valid
	wire  [85:0] sysid_control_slave_agent_rf_source_data;                                // sysid_control_slave_agent:rf_source_data -> sysid_control_slave_agent_rsp_fifo:in_data
	wire         sysid_control_slave_agent_rf_source_ready;                               // sysid_control_slave_agent_rsp_fifo:in_ready -> sysid_control_slave_agent:rf_source_ready
	wire         sysid_control_slave_agent_rf_source_startofpacket;                       // sysid_control_slave_agent:rf_source_startofpacket -> sysid_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_control_slave_agent_rf_source_endofpacket;                         // sysid_control_slave_agent:rf_source_endofpacket -> sysid_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_valid;                            // sysid_control_slave_agent_rsp_fifo:out_valid -> sysid_control_slave_agent:rf_sink_valid
	wire  [85:0] sysid_control_slave_agent_rsp_fifo_out_data;                             // sysid_control_slave_agent_rsp_fifo:out_data -> sysid_control_slave_agent:rf_sink_data
	wire         sysid_control_slave_agent_rsp_fifo_out_ready;                            // sysid_control_slave_agent:rf_sink_ready -> sysid_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_control_slave_agent_rsp_fifo_out_startofpacket;                    // sysid_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_control_slave_agent:rf_sink_startofpacket
	wire         sysid_control_slave_agent_rsp_fifo_out_endofpacket;                      // sysid_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_004_src_valid;                                                   // cmd_mux_004:src_valid -> sysid_control_slave_agent:cp_valid
	wire  [84:0] cmd_mux_004_src_data;                                                    // cmd_mux_004:src_data -> sysid_control_slave_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                   // sysid_control_slave_agent:cp_ready -> cmd_mux_004:src_ready
	wire  [11:0] cmd_mux_004_src_channel;                                                 // cmd_mux_004:src_channel -> sysid_control_slave_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                           // cmd_mux_004:src_startofpacket -> sysid_control_slave_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                             // cmd_mux_004:src_endofpacket -> sysid_control_slave_agent:cp_endofpacket
	wire  [31:0] systimer_s1_agent_m0_readdata;                                           // systimer_s1_translator:uav_readdata -> systimer_s1_agent:m0_readdata
	wire         systimer_s1_agent_m0_waitrequest;                                        // systimer_s1_translator:uav_waitrequest -> systimer_s1_agent:m0_waitrequest
	wire         systimer_s1_agent_m0_debugaccess;                                        // systimer_s1_agent:m0_debugaccess -> systimer_s1_translator:uav_debugaccess
	wire   [8:0] systimer_s1_agent_m0_address;                                            // systimer_s1_agent:m0_address -> systimer_s1_translator:uav_address
	wire   [3:0] systimer_s1_agent_m0_byteenable;                                         // systimer_s1_agent:m0_byteenable -> systimer_s1_translator:uav_byteenable
	wire         systimer_s1_agent_m0_read;                                               // systimer_s1_agent:m0_read -> systimer_s1_translator:uav_read
	wire         systimer_s1_agent_m0_readdatavalid;                                      // systimer_s1_translator:uav_readdatavalid -> systimer_s1_agent:m0_readdatavalid
	wire         systimer_s1_agent_m0_lock;                                               // systimer_s1_agent:m0_lock -> systimer_s1_translator:uav_lock
	wire  [31:0] systimer_s1_agent_m0_writedata;                                          // systimer_s1_agent:m0_writedata -> systimer_s1_translator:uav_writedata
	wire         systimer_s1_agent_m0_write;                                              // systimer_s1_agent:m0_write -> systimer_s1_translator:uav_write
	wire   [2:0] systimer_s1_agent_m0_burstcount;                                         // systimer_s1_agent:m0_burstcount -> systimer_s1_translator:uav_burstcount
	wire         systimer_s1_agent_rf_source_valid;                                       // systimer_s1_agent:rf_source_valid -> systimer_s1_agent_rsp_fifo:in_valid
	wire  [85:0] systimer_s1_agent_rf_source_data;                                        // systimer_s1_agent:rf_source_data -> systimer_s1_agent_rsp_fifo:in_data
	wire         systimer_s1_agent_rf_source_ready;                                       // systimer_s1_agent_rsp_fifo:in_ready -> systimer_s1_agent:rf_source_ready
	wire         systimer_s1_agent_rf_source_startofpacket;                               // systimer_s1_agent:rf_source_startofpacket -> systimer_s1_agent_rsp_fifo:in_startofpacket
	wire         systimer_s1_agent_rf_source_endofpacket;                                 // systimer_s1_agent:rf_source_endofpacket -> systimer_s1_agent_rsp_fifo:in_endofpacket
	wire         systimer_s1_agent_rsp_fifo_out_valid;                                    // systimer_s1_agent_rsp_fifo:out_valid -> systimer_s1_agent:rf_sink_valid
	wire  [85:0] systimer_s1_agent_rsp_fifo_out_data;                                     // systimer_s1_agent_rsp_fifo:out_data -> systimer_s1_agent:rf_sink_data
	wire         systimer_s1_agent_rsp_fifo_out_ready;                                    // systimer_s1_agent:rf_sink_ready -> systimer_s1_agent_rsp_fifo:out_ready
	wire         systimer_s1_agent_rsp_fifo_out_startofpacket;                            // systimer_s1_agent_rsp_fifo:out_startofpacket -> systimer_s1_agent:rf_sink_startofpacket
	wire         systimer_s1_agent_rsp_fifo_out_endofpacket;                              // systimer_s1_agent_rsp_fifo:out_endofpacket -> systimer_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                                   // cmd_mux_005:src_valid -> systimer_s1_agent:cp_valid
	wire  [84:0] cmd_mux_005_src_data;                                                    // cmd_mux_005:src_data -> systimer_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                   // systimer_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [11:0] cmd_mux_005_src_channel;                                                 // cmd_mux_005:src_channel -> systimer_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                           // cmd_mux_005:src_startofpacket -> systimer_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                             // cmd_mux_005:src_endofpacket -> systimer_s1_agent:cp_endofpacket
	wire  [31:0] uart0_s1_agent_m0_readdata;                                              // uart0_s1_translator:uav_readdata -> uart0_s1_agent:m0_readdata
	wire         uart0_s1_agent_m0_waitrequest;                                           // uart0_s1_translator:uav_waitrequest -> uart0_s1_agent:m0_waitrequest
	wire         uart0_s1_agent_m0_debugaccess;                                           // uart0_s1_agent:m0_debugaccess -> uart0_s1_translator:uav_debugaccess
	wire   [8:0] uart0_s1_agent_m0_address;                                               // uart0_s1_agent:m0_address -> uart0_s1_translator:uav_address
	wire   [3:0] uart0_s1_agent_m0_byteenable;                                            // uart0_s1_agent:m0_byteenable -> uart0_s1_translator:uav_byteenable
	wire         uart0_s1_agent_m0_read;                                                  // uart0_s1_agent:m0_read -> uart0_s1_translator:uav_read
	wire         uart0_s1_agent_m0_readdatavalid;                                         // uart0_s1_translator:uav_readdatavalid -> uart0_s1_agent:m0_readdatavalid
	wire         uart0_s1_agent_m0_lock;                                                  // uart0_s1_agent:m0_lock -> uart0_s1_translator:uav_lock
	wire  [31:0] uart0_s1_agent_m0_writedata;                                             // uart0_s1_agent:m0_writedata -> uart0_s1_translator:uav_writedata
	wire         uart0_s1_agent_m0_write;                                                 // uart0_s1_agent:m0_write -> uart0_s1_translator:uav_write
	wire   [2:0] uart0_s1_agent_m0_burstcount;                                            // uart0_s1_agent:m0_burstcount -> uart0_s1_translator:uav_burstcount
	wire         uart0_s1_agent_rf_source_valid;                                          // uart0_s1_agent:rf_source_valid -> uart0_s1_agent_rsp_fifo:in_valid
	wire  [85:0] uart0_s1_agent_rf_source_data;                                           // uart0_s1_agent:rf_source_data -> uart0_s1_agent_rsp_fifo:in_data
	wire         uart0_s1_agent_rf_source_ready;                                          // uart0_s1_agent_rsp_fifo:in_ready -> uart0_s1_agent:rf_source_ready
	wire         uart0_s1_agent_rf_source_startofpacket;                                  // uart0_s1_agent:rf_source_startofpacket -> uart0_s1_agent_rsp_fifo:in_startofpacket
	wire         uart0_s1_agent_rf_source_endofpacket;                                    // uart0_s1_agent:rf_source_endofpacket -> uart0_s1_agent_rsp_fifo:in_endofpacket
	wire         uart0_s1_agent_rsp_fifo_out_valid;                                       // uart0_s1_agent_rsp_fifo:out_valid -> uart0_s1_agent:rf_sink_valid
	wire  [85:0] uart0_s1_agent_rsp_fifo_out_data;                                        // uart0_s1_agent_rsp_fifo:out_data -> uart0_s1_agent:rf_sink_data
	wire         uart0_s1_agent_rsp_fifo_out_ready;                                       // uart0_s1_agent:rf_sink_ready -> uart0_s1_agent_rsp_fifo:out_ready
	wire         uart0_s1_agent_rsp_fifo_out_startofpacket;                               // uart0_s1_agent_rsp_fifo:out_startofpacket -> uart0_s1_agent:rf_sink_startofpacket
	wire         uart0_s1_agent_rsp_fifo_out_endofpacket;                                 // uart0_s1_agent_rsp_fifo:out_endofpacket -> uart0_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_006_src_valid;                                                   // cmd_mux_006:src_valid -> uart0_s1_agent:cp_valid
	wire  [84:0] cmd_mux_006_src_data;                                                    // cmd_mux_006:src_data -> uart0_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                   // uart0_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire  [11:0] cmd_mux_006_src_channel;                                                 // cmd_mux_006:src_channel -> uart0_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                           // cmd_mux_006:src_startofpacket -> uart0_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                             // cmd_mux_006:src_endofpacket -> uart0_s1_agent:cp_endofpacket
	wire  [31:0] uart1_s1_agent_m0_readdata;                                              // uart1_s1_translator:uav_readdata -> uart1_s1_agent:m0_readdata
	wire         uart1_s1_agent_m0_waitrequest;                                           // uart1_s1_translator:uav_waitrequest -> uart1_s1_agent:m0_waitrequest
	wire         uart1_s1_agent_m0_debugaccess;                                           // uart1_s1_agent:m0_debugaccess -> uart1_s1_translator:uav_debugaccess
	wire   [8:0] uart1_s1_agent_m0_address;                                               // uart1_s1_agent:m0_address -> uart1_s1_translator:uav_address
	wire   [3:0] uart1_s1_agent_m0_byteenable;                                            // uart1_s1_agent:m0_byteenable -> uart1_s1_translator:uav_byteenable
	wire         uart1_s1_agent_m0_read;                                                  // uart1_s1_agent:m0_read -> uart1_s1_translator:uav_read
	wire         uart1_s1_agent_m0_readdatavalid;                                         // uart1_s1_translator:uav_readdatavalid -> uart1_s1_agent:m0_readdatavalid
	wire         uart1_s1_agent_m0_lock;                                                  // uart1_s1_agent:m0_lock -> uart1_s1_translator:uav_lock
	wire  [31:0] uart1_s1_agent_m0_writedata;                                             // uart1_s1_agent:m0_writedata -> uart1_s1_translator:uav_writedata
	wire         uart1_s1_agent_m0_write;                                                 // uart1_s1_agent:m0_write -> uart1_s1_translator:uav_write
	wire   [2:0] uart1_s1_agent_m0_burstcount;                                            // uart1_s1_agent:m0_burstcount -> uart1_s1_translator:uav_burstcount
	wire         uart1_s1_agent_rf_source_valid;                                          // uart1_s1_agent:rf_source_valid -> uart1_s1_agent_rsp_fifo:in_valid
	wire  [85:0] uart1_s1_agent_rf_source_data;                                           // uart1_s1_agent:rf_source_data -> uart1_s1_agent_rsp_fifo:in_data
	wire         uart1_s1_agent_rf_source_ready;                                          // uart1_s1_agent_rsp_fifo:in_ready -> uart1_s1_agent:rf_source_ready
	wire         uart1_s1_agent_rf_source_startofpacket;                                  // uart1_s1_agent:rf_source_startofpacket -> uart1_s1_agent_rsp_fifo:in_startofpacket
	wire         uart1_s1_agent_rf_source_endofpacket;                                    // uart1_s1_agent:rf_source_endofpacket -> uart1_s1_agent_rsp_fifo:in_endofpacket
	wire         uart1_s1_agent_rsp_fifo_out_valid;                                       // uart1_s1_agent_rsp_fifo:out_valid -> uart1_s1_agent:rf_sink_valid
	wire  [85:0] uart1_s1_agent_rsp_fifo_out_data;                                        // uart1_s1_agent_rsp_fifo:out_data -> uart1_s1_agent:rf_sink_data
	wire         uart1_s1_agent_rsp_fifo_out_ready;                                       // uart1_s1_agent:rf_sink_ready -> uart1_s1_agent_rsp_fifo:out_ready
	wire         uart1_s1_agent_rsp_fifo_out_startofpacket;                               // uart1_s1_agent_rsp_fifo:out_startofpacket -> uart1_s1_agent:rf_sink_startofpacket
	wire         uart1_s1_agent_rsp_fifo_out_endofpacket;                                 // uart1_s1_agent_rsp_fifo:out_endofpacket -> uart1_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_007_src_valid;                                                   // cmd_mux_007:src_valid -> uart1_s1_agent:cp_valid
	wire  [84:0] cmd_mux_007_src_data;                                                    // cmd_mux_007:src_data -> uart1_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                   // uart1_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire  [11:0] cmd_mux_007_src_channel;                                                 // cmd_mux_007:src_channel -> uart1_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                           // cmd_mux_007:src_startofpacket -> uart1_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                             // cmd_mux_007:src_endofpacket -> uart1_s1_agent:cp_endofpacket
	wire  [31:0] spi_s1_agent_m0_readdata;                                                // spi_s1_translator:uav_readdata -> spi_s1_agent:m0_readdata
	wire         spi_s1_agent_m0_waitrequest;                                             // spi_s1_translator:uav_waitrequest -> spi_s1_agent:m0_waitrequest
	wire         spi_s1_agent_m0_debugaccess;                                             // spi_s1_agent:m0_debugaccess -> spi_s1_translator:uav_debugaccess
	wire   [8:0] spi_s1_agent_m0_address;                                                 // spi_s1_agent:m0_address -> spi_s1_translator:uav_address
	wire   [3:0] spi_s1_agent_m0_byteenable;                                              // spi_s1_agent:m0_byteenable -> spi_s1_translator:uav_byteenable
	wire         spi_s1_agent_m0_read;                                                    // spi_s1_agent:m0_read -> spi_s1_translator:uav_read
	wire         spi_s1_agent_m0_readdatavalid;                                           // spi_s1_translator:uav_readdatavalid -> spi_s1_agent:m0_readdatavalid
	wire         spi_s1_agent_m0_lock;                                                    // spi_s1_agent:m0_lock -> spi_s1_translator:uav_lock
	wire  [31:0] spi_s1_agent_m0_writedata;                                               // spi_s1_agent:m0_writedata -> spi_s1_translator:uav_writedata
	wire         spi_s1_agent_m0_write;                                                   // spi_s1_agent:m0_write -> spi_s1_translator:uav_write
	wire   [2:0] spi_s1_agent_m0_burstcount;                                              // spi_s1_agent:m0_burstcount -> spi_s1_translator:uav_burstcount
	wire         spi_s1_agent_rf_source_valid;                                            // spi_s1_agent:rf_source_valid -> spi_s1_agent_rsp_fifo:in_valid
	wire  [85:0] spi_s1_agent_rf_source_data;                                             // spi_s1_agent:rf_source_data -> spi_s1_agent_rsp_fifo:in_data
	wire         spi_s1_agent_rf_source_ready;                                            // spi_s1_agent_rsp_fifo:in_ready -> spi_s1_agent:rf_source_ready
	wire         spi_s1_agent_rf_source_startofpacket;                                    // spi_s1_agent:rf_source_startofpacket -> spi_s1_agent_rsp_fifo:in_startofpacket
	wire         spi_s1_agent_rf_source_endofpacket;                                      // spi_s1_agent:rf_source_endofpacket -> spi_s1_agent_rsp_fifo:in_endofpacket
	wire         spi_s1_agent_rsp_fifo_out_valid;                                         // spi_s1_agent_rsp_fifo:out_valid -> spi_s1_agent:rf_sink_valid
	wire  [85:0] spi_s1_agent_rsp_fifo_out_data;                                          // spi_s1_agent_rsp_fifo:out_data -> spi_s1_agent:rf_sink_data
	wire         spi_s1_agent_rsp_fifo_out_ready;                                         // spi_s1_agent:rf_sink_ready -> spi_s1_agent_rsp_fifo:out_ready
	wire         spi_s1_agent_rsp_fifo_out_startofpacket;                                 // spi_s1_agent_rsp_fifo:out_startofpacket -> spi_s1_agent:rf_sink_startofpacket
	wire         spi_s1_agent_rsp_fifo_out_endofpacket;                                   // spi_s1_agent_rsp_fifo:out_endofpacket -> spi_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                                   // cmd_mux_008:src_valid -> spi_s1_agent:cp_valid
	wire  [84:0] cmd_mux_008_src_data;                                                    // cmd_mux_008:src_data -> spi_s1_agent:cp_data
	wire         cmd_mux_008_src_ready;                                                   // spi_s1_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [11:0] cmd_mux_008_src_channel;                                                 // cmd_mux_008:src_channel -> spi_s1_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                           // cmd_mux_008:src_startofpacket -> spi_s1_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                             // cmd_mux_008:src_endofpacket -> spi_s1_agent:cp_endofpacket
	wire  [31:0] i2c_s1_agent_m0_readdata;                                                // i2c_s1_translator:uav_readdata -> i2c_s1_agent:m0_readdata
	wire         i2c_s1_agent_m0_waitrequest;                                             // i2c_s1_translator:uav_waitrequest -> i2c_s1_agent:m0_waitrequest
	wire         i2c_s1_agent_m0_debugaccess;                                             // i2c_s1_agent:m0_debugaccess -> i2c_s1_translator:uav_debugaccess
	wire   [8:0] i2c_s1_agent_m0_address;                                                 // i2c_s1_agent:m0_address -> i2c_s1_translator:uav_address
	wire   [3:0] i2c_s1_agent_m0_byteenable;                                              // i2c_s1_agent:m0_byteenable -> i2c_s1_translator:uav_byteenable
	wire         i2c_s1_agent_m0_read;                                                    // i2c_s1_agent:m0_read -> i2c_s1_translator:uav_read
	wire         i2c_s1_agent_m0_readdatavalid;                                           // i2c_s1_translator:uav_readdatavalid -> i2c_s1_agent:m0_readdatavalid
	wire         i2c_s1_agent_m0_lock;                                                    // i2c_s1_agent:m0_lock -> i2c_s1_translator:uav_lock
	wire  [31:0] i2c_s1_agent_m0_writedata;                                               // i2c_s1_agent:m0_writedata -> i2c_s1_translator:uav_writedata
	wire         i2c_s1_agent_m0_write;                                                   // i2c_s1_agent:m0_write -> i2c_s1_translator:uav_write
	wire   [2:0] i2c_s1_agent_m0_burstcount;                                              // i2c_s1_agent:m0_burstcount -> i2c_s1_translator:uav_burstcount
	wire         i2c_s1_agent_rf_source_valid;                                            // i2c_s1_agent:rf_source_valid -> i2c_s1_agent_rsp_fifo:in_valid
	wire  [85:0] i2c_s1_agent_rf_source_data;                                             // i2c_s1_agent:rf_source_data -> i2c_s1_agent_rsp_fifo:in_data
	wire         i2c_s1_agent_rf_source_ready;                                            // i2c_s1_agent_rsp_fifo:in_ready -> i2c_s1_agent:rf_source_ready
	wire         i2c_s1_agent_rf_source_startofpacket;                                    // i2c_s1_agent:rf_source_startofpacket -> i2c_s1_agent_rsp_fifo:in_startofpacket
	wire         i2c_s1_agent_rf_source_endofpacket;                                      // i2c_s1_agent:rf_source_endofpacket -> i2c_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_s1_agent_rsp_fifo_out_valid;                                         // i2c_s1_agent_rsp_fifo:out_valid -> i2c_s1_agent:rf_sink_valid
	wire  [85:0] i2c_s1_agent_rsp_fifo_out_data;                                          // i2c_s1_agent_rsp_fifo:out_data -> i2c_s1_agent:rf_sink_data
	wire         i2c_s1_agent_rsp_fifo_out_ready;                                         // i2c_s1_agent:rf_sink_ready -> i2c_s1_agent_rsp_fifo:out_ready
	wire         i2c_s1_agent_rsp_fifo_out_startofpacket;                                 // i2c_s1_agent_rsp_fifo:out_startofpacket -> i2c_s1_agent:rf_sink_startofpacket
	wire         i2c_s1_agent_rsp_fifo_out_endofpacket;                                   // i2c_s1_agent_rsp_fifo:out_endofpacket -> i2c_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_009_src_valid;                                                   // cmd_mux_009:src_valid -> i2c_s1_agent:cp_valid
	wire  [84:0] cmd_mux_009_src_data;                                                    // cmd_mux_009:src_data -> i2c_s1_agent:cp_data
	wire         cmd_mux_009_src_ready;                                                   // i2c_s1_agent:cp_ready -> cmd_mux_009:src_ready
	wire  [11:0] cmd_mux_009_src_channel;                                                 // cmd_mux_009:src_channel -> i2c_s1_agent:cp_channel
	wire         cmd_mux_009_src_startofpacket;                                           // cmd_mux_009:src_startofpacket -> i2c_s1_agent:cp_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                             // cmd_mux_009:src_endofpacket -> i2c_s1_agent:cp_endofpacket
	wire  [31:0] hostbridge_s1_agent_m0_readdata;                                         // hostbridge_s1_translator:uav_readdata -> hostbridge_s1_agent:m0_readdata
	wire         hostbridge_s1_agent_m0_waitrequest;                                      // hostbridge_s1_translator:uav_waitrequest -> hostbridge_s1_agent:m0_waitrequest
	wire         hostbridge_s1_agent_m0_debugaccess;                                      // hostbridge_s1_agent:m0_debugaccess -> hostbridge_s1_translator:uav_debugaccess
	wire   [8:0] hostbridge_s1_agent_m0_address;                                          // hostbridge_s1_agent:m0_address -> hostbridge_s1_translator:uav_address
	wire   [3:0] hostbridge_s1_agent_m0_byteenable;                                       // hostbridge_s1_agent:m0_byteenable -> hostbridge_s1_translator:uav_byteenable
	wire         hostbridge_s1_agent_m0_read;                                             // hostbridge_s1_agent:m0_read -> hostbridge_s1_translator:uav_read
	wire         hostbridge_s1_agent_m0_readdatavalid;                                    // hostbridge_s1_translator:uav_readdatavalid -> hostbridge_s1_agent:m0_readdatavalid
	wire         hostbridge_s1_agent_m0_lock;                                             // hostbridge_s1_agent:m0_lock -> hostbridge_s1_translator:uav_lock
	wire  [31:0] hostbridge_s1_agent_m0_writedata;                                        // hostbridge_s1_agent:m0_writedata -> hostbridge_s1_translator:uav_writedata
	wire         hostbridge_s1_agent_m0_write;                                            // hostbridge_s1_agent:m0_write -> hostbridge_s1_translator:uav_write
	wire   [2:0] hostbridge_s1_agent_m0_burstcount;                                       // hostbridge_s1_agent:m0_burstcount -> hostbridge_s1_translator:uav_burstcount
	wire         hostbridge_s1_agent_rf_source_valid;                                     // hostbridge_s1_agent:rf_source_valid -> hostbridge_s1_agent_rsp_fifo:in_valid
	wire  [85:0] hostbridge_s1_agent_rf_source_data;                                      // hostbridge_s1_agent:rf_source_data -> hostbridge_s1_agent_rsp_fifo:in_data
	wire         hostbridge_s1_agent_rf_source_ready;                                     // hostbridge_s1_agent_rsp_fifo:in_ready -> hostbridge_s1_agent:rf_source_ready
	wire         hostbridge_s1_agent_rf_source_startofpacket;                             // hostbridge_s1_agent:rf_source_startofpacket -> hostbridge_s1_agent_rsp_fifo:in_startofpacket
	wire         hostbridge_s1_agent_rf_source_endofpacket;                               // hostbridge_s1_agent:rf_source_endofpacket -> hostbridge_s1_agent_rsp_fifo:in_endofpacket
	wire         hostbridge_s1_agent_rsp_fifo_out_valid;                                  // hostbridge_s1_agent_rsp_fifo:out_valid -> hostbridge_s1_agent:rf_sink_valid
	wire  [85:0] hostbridge_s1_agent_rsp_fifo_out_data;                                   // hostbridge_s1_agent_rsp_fifo:out_data -> hostbridge_s1_agent:rf_sink_data
	wire         hostbridge_s1_agent_rsp_fifo_out_ready;                                  // hostbridge_s1_agent:rf_sink_ready -> hostbridge_s1_agent_rsp_fifo:out_ready
	wire         hostbridge_s1_agent_rsp_fifo_out_startofpacket;                          // hostbridge_s1_agent_rsp_fifo:out_startofpacket -> hostbridge_s1_agent:rf_sink_startofpacket
	wire         hostbridge_s1_agent_rsp_fifo_out_endofpacket;                            // hostbridge_s1_agent_rsp_fifo:out_endofpacket -> hostbridge_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_010_src_valid;                                                   // cmd_mux_010:src_valid -> hostbridge_s1_agent:cp_valid
	wire  [84:0] cmd_mux_010_src_data;                                                    // cmd_mux_010:src_data -> hostbridge_s1_agent:cp_data
	wire         cmd_mux_010_src_ready;                                                   // hostbridge_s1_agent:cp_ready -> cmd_mux_010:src_ready
	wire  [11:0] cmd_mux_010_src_channel;                                                 // cmd_mux_010:src_channel -> hostbridge_s1_agent:cp_channel
	wire         cmd_mux_010_src_startofpacket;                                           // cmd_mux_010:src_startofpacket -> hostbridge_s1_agent:cp_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                             // cmd_mux_010:src_endofpacket -> hostbridge_s1_agent:cp_endofpacket
	wire  [31:0] led_s1_agent_m0_readdata;                                                // led_s1_translator:uav_readdata -> led_s1_agent:m0_readdata
	wire         led_s1_agent_m0_waitrequest;                                             // led_s1_translator:uav_waitrequest -> led_s1_agent:m0_waitrequest
	wire         led_s1_agent_m0_debugaccess;                                             // led_s1_agent:m0_debugaccess -> led_s1_translator:uav_debugaccess
	wire   [8:0] led_s1_agent_m0_address;                                                 // led_s1_agent:m0_address -> led_s1_translator:uav_address
	wire   [3:0] led_s1_agent_m0_byteenable;                                              // led_s1_agent:m0_byteenable -> led_s1_translator:uav_byteenable
	wire         led_s1_agent_m0_read;                                                    // led_s1_agent:m0_read -> led_s1_translator:uav_read
	wire         led_s1_agent_m0_readdatavalid;                                           // led_s1_translator:uav_readdatavalid -> led_s1_agent:m0_readdatavalid
	wire         led_s1_agent_m0_lock;                                                    // led_s1_agent:m0_lock -> led_s1_translator:uav_lock
	wire  [31:0] led_s1_agent_m0_writedata;                                               // led_s1_agent:m0_writedata -> led_s1_translator:uav_writedata
	wire         led_s1_agent_m0_write;                                                   // led_s1_agent:m0_write -> led_s1_translator:uav_write
	wire   [2:0] led_s1_agent_m0_burstcount;                                              // led_s1_agent:m0_burstcount -> led_s1_translator:uav_burstcount
	wire         led_s1_agent_rf_source_valid;                                            // led_s1_agent:rf_source_valid -> led_s1_agent_rsp_fifo:in_valid
	wire  [85:0] led_s1_agent_rf_source_data;                                             // led_s1_agent:rf_source_data -> led_s1_agent_rsp_fifo:in_data
	wire         led_s1_agent_rf_source_ready;                                            // led_s1_agent_rsp_fifo:in_ready -> led_s1_agent:rf_source_ready
	wire         led_s1_agent_rf_source_startofpacket;                                    // led_s1_agent:rf_source_startofpacket -> led_s1_agent_rsp_fifo:in_startofpacket
	wire         led_s1_agent_rf_source_endofpacket;                                      // led_s1_agent:rf_source_endofpacket -> led_s1_agent_rsp_fifo:in_endofpacket
	wire         led_s1_agent_rsp_fifo_out_valid;                                         // led_s1_agent_rsp_fifo:out_valid -> led_s1_agent:rf_sink_valid
	wire  [85:0] led_s1_agent_rsp_fifo_out_data;                                          // led_s1_agent_rsp_fifo:out_data -> led_s1_agent:rf_sink_data
	wire         led_s1_agent_rsp_fifo_out_ready;                                         // led_s1_agent:rf_sink_ready -> led_s1_agent_rsp_fifo:out_ready
	wire         led_s1_agent_rsp_fifo_out_startofpacket;                                 // led_s1_agent_rsp_fifo:out_startofpacket -> led_s1_agent:rf_sink_startofpacket
	wire         led_s1_agent_rsp_fifo_out_endofpacket;                                   // led_s1_agent_rsp_fifo:out_endofpacket -> led_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_011_src_valid;                                                   // cmd_mux_011:src_valid -> led_s1_agent:cp_valid
	wire  [84:0] cmd_mux_011_src_data;                                                    // cmd_mux_011:src_data -> led_s1_agent:cp_data
	wire         cmd_mux_011_src_ready;                                                   // led_s1_agent:cp_ready -> cmd_mux_011:src_ready
	wire  [11:0] cmd_mux_011_src_channel;                                                 // cmd_mux_011:src_channel -> led_s1_agent:cp_channel
	wire         cmd_mux_011_src_startofpacket;                                           // cmd_mux_011:src_startofpacket -> led_s1_agent:cp_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                             // cmd_mux_011:src_endofpacket -> led_s1_agent:cp_endofpacket
	wire         peripheral_bridge_m0_agent_cp_valid;                                     // peripheral_bridge_m0_agent:cp_valid -> router:sink_valid
	wire  [84:0] peripheral_bridge_m0_agent_cp_data;                                      // peripheral_bridge_m0_agent:cp_data -> router:sink_data
	wire         peripheral_bridge_m0_agent_cp_ready;                                     // router:sink_ready -> peripheral_bridge_m0_agent:cp_ready
	wire         peripheral_bridge_m0_agent_cp_startofpacket;                             // peripheral_bridge_m0_agent:cp_startofpacket -> router:sink_startofpacket
	wire         peripheral_bridge_m0_agent_cp_endofpacket;                               // peripheral_bridge_m0_agent:cp_endofpacket -> router:sink_endofpacket
	wire         dual_boot_0_avalon_agent_rp_valid;                                       // dual_boot_0_avalon_agent:rp_valid -> router_001:sink_valid
	wire  [84:0] dual_boot_0_avalon_agent_rp_data;                                        // dual_boot_0_avalon_agent:rp_data -> router_001:sink_data
	wire         dual_boot_0_avalon_agent_rp_ready;                                       // router_001:sink_ready -> dual_boot_0_avalon_agent:rp_ready
	wire         dual_boot_0_avalon_agent_rp_startofpacket;                               // dual_boot_0_avalon_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         dual_boot_0_avalon_agent_rp_endofpacket;                                 // dual_boot_0_avalon_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [84:0] router_001_src_data;                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire  [11:0] router_001_src_channel;                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         pfc_avalon_slave_agent_rp_valid;                                         // pfc_avalon_slave_agent:rp_valid -> router_002:sink_valid
	wire  [84:0] pfc_avalon_slave_agent_rp_data;                                          // pfc_avalon_slave_agent:rp_data -> router_002:sink_data
	wire         pfc_avalon_slave_agent_rp_ready;                                         // router_002:sink_ready -> pfc_avalon_slave_agent:rp_ready
	wire         pfc_avalon_slave_agent_rp_startofpacket;                                 // pfc_avalon_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         pfc_avalon_slave_agent_rp_endofpacket;                                   // pfc_avalon_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                    // router_002:src_valid -> rsp_demux_001:sink_valid
	wire  [84:0] router_002_src_data;                                                     // router_002:src_data -> rsp_demux_001:sink_data
	wire         router_002_src_ready;                                                    // rsp_demux_001:sink_ready -> router_002:src_ready
	wire  [11:0] router_002_src_channel;                                                  // router_002:src_channel -> rsp_demux_001:sink_channel
	wire         router_002_src_startofpacket;                                            // router_002:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_002_src_endofpacket;                                              // router_002:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         servo_avalon_slave_agent_rp_valid;                                       // servo_avalon_slave_agent:rp_valid -> router_003:sink_valid
	wire  [84:0] servo_avalon_slave_agent_rp_data;                                        // servo_avalon_slave_agent:rp_data -> router_003:sink_data
	wire         servo_avalon_slave_agent_rp_ready;                                       // router_003:sink_ready -> servo_avalon_slave_agent:rp_ready
	wire         servo_avalon_slave_agent_rp_startofpacket;                               // servo_avalon_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         servo_avalon_slave_agent_rp_endofpacket;                                 // servo_avalon_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                    // router_003:src_valid -> rsp_demux_002:sink_valid
	wire  [84:0] router_003_src_data;                                                     // router_003:src_data -> rsp_demux_002:sink_data
	wire         router_003_src_ready;                                                    // rsp_demux_002:sink_ready -> router_003:src_ready
	wire  [11:0] router_003_src_channel;                                                  // router_003:src_channel -> rsp_demux_002:sink_channel
	wire         router_003_src_startofpacket;                                            // router_003:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_003_src_endofpacket;                                              // router_003:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         chipid_chipid_agent_rp_valid;                                            // chipid_chipid_agent:rp_valid -> router_004:sink_valid
	wire  [84:0] chipid_chipid_agent_rp_data;                                             // chipid_chipid_agent:rp_data -> router_004:sink_data
	wire         chipid_chipid_agent_rp_ready;                                            // router_004:sink_ready -> chipid_chipid_agent:rp_ready
	wire         chipid_chipid_agent_rp_startofpacket;                                    // chipid_chipid_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         chipid_chipid_agent_rp_endofpacket;                                      // chipid_chipid_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                    // router_004:src_valid -> rsp_demux_003:sink_valid
	wire  [84:0] router_004_src_data;                                                     // router_004:src_data -> rsp_demux_003:sink_data
	wire         router_004_src_ready;                                                    // rsp_demux_003:sink_ready -> router_004:src_ready
	wire  [11:0] router_004_src_channel;                                                  // router_004:src_channel -> rsp_demux_003:sink_channel
	wire         router_004_src_startofpacket;                                            // router_004:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_004_src_endofpacket;                                              // router_004:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         sysid_control_slave_agent_rp_valid;                                      // sysid_control_slave_agent:rp_valid -> router_005:sink_valid
	wire  [84:0] sysid_control_slave_agent_rp_data;                                       // sysid_control_slave_agent:rp_data -> router_005:sink_data
	wire         sysid_control_slave_agent_rp_ready;                                      // router_005:sink_ready -> sysid_control_slave_agent:rp_ready
	wire         sysid_control_slave_agent_rp_startofpacket;                              // sysid_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         sysid_control_slave_agent_rp_endofpacket;                                // sysid_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                    // router_005:src_valid -> rsp_demux_004:sink_valid
	wire  [84:0] router_005_src_data;                                                     // router_005:src_data -> rsp_demux_004:sink_data
	wire         router_005_src_ready;                                                    // rsp_demux_004:sink_ready -> router_005:src_ready
	wire  [11:0] router_005_src_channel;                                                  // router_005:src_channel -> rsp_demux_004:sink_channel
	wire         router_005_src_startofpacket;                                            // router_005:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_005_src_endofpacket;                                              // router_005:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         systimer_s1_agent_rp_valid;                                              // systimer_s1_agent:rp_valid -> router_006:sink_valid
	wire  [84:0] systimer_s1_agent_rp_data;                                               // systimer_s1_agent:rp_data -> router_006:sink_data
	wire         systimer_s1_agent_rp_ready;                                              // router_006:sink_ready -> systimer_s1_agent:rp_ready
	wire         systimer_s1_agent_rp_startofpacket;                                      // systimer_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         systimer_s1_agent_rp_endofpacket;                                        // systimer_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                    // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [84:0] router_006_src_data;                                                     // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                                    // rsp_demux_005:sink_ready -> router_006:src_ready
	wire  [11:0] router_006_src_channel;                                                  // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                            // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                              // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         uart0_s1_agent_rp_valid;                                                 // uart0_s1_agent:rp_valid -> router_007:sink_valid
	wire  [84:0] uart0_s1_agent_rp_data;                                                  // uart0_s1_agent:rp_data -> router_007:sink_data
	wire         uart0_s1_agent_rp_ready;                                                 // router_007:sink_ready -> uart0_s1_agent:rp_ready
	wire         uart0_s1_agent_rp_startofpacket;                                         // uart0_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         uart0_s1_agent_rp_endofpacket;                                           // uart0_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                    // router_007:src_valid -> rsp_demux_006:sink_valid
	wire  [84:0] router_007_src_data;                                                     // router_007:src_data -> rsp_demux_006:sink_data
	wire         router_007_src_ready;                                                    // rsp_demux_006:sink_ready -> router_007:src_ready
	wire  [11:0] router_007_src_channel;                                                  // router_007:src_channel -> rsp_demux_006:sink_channel
	wire         router_007_src_startofpacket;                                            // router_007:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_007_src_endofpacket;                                              // router_007:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         uart1_s1_agent_rp_valid;                                                 // uart1_s1_agent:rp_valid -> router_008:sink_valid
	wire  [84:0] uart1_s1_agent_rp_data;                                                  // uart1_s1_agent:rp_data -> router_008:sink_data
	wire         uart1_s1_agent_rp_ready;                                                 // router_008:sink_ready -> uart1_s1_agent:rp_ready
	wire         uart1_s1_agent_rp_startofpacket;                                         // uart1_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         uart1_s1_agent_rp_endofpacket;                                           // uart1_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                    // router_008:src_valid -> rsp_demux_007:sink_valid
	wire  [84:0] router_008_src_data;                                                     // router_008:src_data -> rsp_demux_007:sink_data
	wire         router_008_src_ready;                                                    // rsp_demux_007:sink_ready -> router_008:src_ready
	wire  [11:0] router_008_src_channel;                                                  // router_008:src_channel -> rsp_demux_007:sink_channel
	wire         router_008_src_startofpacket;                                            // router_008:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_008_src_endofpacket;                                              // router_008:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         spi_s1_agent_rp_valid;                                                   // spi_s1_agent:rp_valid -> router_009:sink_valid
	wire  [84:0] spi_s1_agent_rp_data;                                                    // spi_s1_agent:rp_data -> router_009:sink_data
	wire         spi_s1_agent_rp_ready;                                                   // router_009:sink_ready -> spi_s1_agent:rp_ready
	wire         spi_s1_agent_rp_startofpacket;                                           // spi_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         spi_s1_agent_rp_endofpacket;                                             // spi_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                    // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [84:0] router_009_src_data;                                                     // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                                    // rsp_demux_008:sink_ready -> router_009:src_ready
	wire  [11:0] router_009_src_channel;                                                  // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                            // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                              // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         i2c_s1_agent_rp_valid;                                                   // i2c_s1_agent:rp_valid -> router_010:sink_valid
	wire  [84:0] i2c_s1_agent_rp_data;                                                    // i2c_s1_agent:rp_data -> router_010:sink_data
	wire         i2c_s1_agent_rp_ready;                                                   // router_010:sink_ready -> i2c_s1_agent:rp_ready
	wire         i2c_s1_agent_rp_startofpacket;                                           // i2c_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         i2c_s1_agent_rp_endofpacket;                                             // i2c_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         router_010_src_valid;                                                    // router_010:src_valid -> rsp_demux_009:sink_valid
	wire  [84:0] router_010_src_data;                                                     // router_010:src_data -> rsp_demux_009:sink_data
	wire         router_010_src_ready;                                                    // rsp_demux_009:sink_ready -> router_010:src_ready
	wire  [11:0] router_010_src_channel;                                                  // router_010:src_channel -> rsp_demux_009:sink_channel
	wire         router_010_src_startofpacket;                                            // router_010:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         router_010_src_endofpacket;                                              // router_010:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         hostbridge_s1_agent_rp_valid;                                            // hostbridge_s1_agent:rp_valid -> router_011:sink_valid
	wire  [84:0] hostbridge_s1_agent_rp_data;                                             // hostbridge_s1_agent:rp_data -> router_011:sink_data
	wire         hostbridge_s1_agent_rp_ready;                                            // router_011:sink_ready -> hostbridge_s1_agent:rp_ready
	wire         hostbridge_s1_agent_rp_startofpacket;                                    // hostbridge_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         hostbridge_s1_agent_rp_endofpacket;                                      // hostbridge_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         router_011_src_valid;                                                    // router_011:src_valid -> rsp_demux_010:sink_valid
	wire  [84:0] router_011_src_data;                                                     // router_011:src_data -> rsp_demux_010:sink_data
	wire         router_011_src_ready;                                                    // rsp_demux_010:sink_ready -> router_011:src_ready
	wire  [11:0] router_011_src_channel;                                                  // router_011:src_channel -> rsp_demux_010:sink_channel
	wire         router_011_src_startofpacket;                                            // router_011:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         router_011_src_endofpacket;                                              // router_011:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         led_s1_agent_rp_valid;                                                   // led_s1_agent:rp_valid -> router_012:sink_valid
	wire  [84:0] led_s1_agent_rp_data;                                                    // led_s1_agent:rp_data -> router_012:sink_data
	wire         led_s1_agent_rp_ready;                                                   // router_012:sink_ready -> led_s1_agent:rp_ready
	wire         led_s1_agent_rp_startofpacket;                                           // led_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         led_s1_agent_rp_endofpacket;                                             // led_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         router_012_src_valid;                                                    // router_012:src_valid -> rsp_demux_011:sink_valid
	wire  [84:0] router_012_src_data;                                                     // router_012:src_data -> rsp_demux_011:sink_data
	wire         router_012_src_ready;                                                    // rsp_demux_011:sink_ready -> router_012:src_ready
	wire  [11:0] router_012_src_channel;                                                  // router_012:src_channel -> rsp_demux_011:sink_channel
	wire         router_012_src_startofpacket;                                            // router_012:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         router_012_src_endofpacket;                                              // router_012:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_src_valid;                                                        // router:src_valid -> peripheral_bridge_m0_limiter:cmd_sink_valid
	wire  [84:0] router_src_data;                                                         // router:src_data -> peripheral_bridge_m0_limiter:cmd_sink_data
	wire         router_src_ready;                                                        // peripheral_bridge_m0_limiter:cmd_sink_ready -> router:src_ready
	wire  [11:0] router_src_channel;                                                      // router:src_channel -> peripheral_bridge_m0_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                                // router:src_startofpacket -> peripheral_bridge_m0_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                                  // router:src_endofpacket -> peripheral_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [84:0] peripheral_bridge_m0_limiter_cmd_src_data;                               // peripheral_bridge_m0_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         peripheral_bridge_m0_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> peripheral_bridge_m0_limiter:cmd_src_ready
	wire  [11:0] peripheral_bridge_m0_limiter_cmd_src_channel;                            // peripheral_bridge_m0_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         peripheral_bridge_m0_limiter_cmd_src_startofpacket;                      // peripheral_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         peripheral_bridge_m0_limiter_cmd_src_endofpacket;                        // peripheral_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                       // rsp_mux:src_valid -> peripheral_bridge_m0_limiter:rsp_sink_valid
	wire  [84:0] rsp_mux_src_data;                                                        // rsp_mux:src_data -> peripheral_bridge_m0_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                       // peripheral_bridge_m0_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [11:0] rsp_mux_src_channel;                                                     // rsp_mux:src_channel -> peripheral_bridge_m0_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                               // rsp_mux:src_startofpacket -> peripheral_bridge_m0_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                                 // rsp_mux:src_endofpacket -> peripheral_bridge_m0_limiter:rsp_sink_endofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_valid;                              // peripheral_bridge_m0_limiter:rsp_src_valid -> peripheral_bridge_m0_agent:rp_valid
	wire  [84:0] peripheral_bridge_m0_limiter_rsp_src_data;                               // peripheral_bridge_m0_limiter:rsp_src_data -> peripheral_bridge_m0_agent:rp_data
	wire         peripheral_bridge_m0_limiter_rsp_src_ready;                              // peripheral_bridge_m0_agent:rp_ready -> peripheral_bridge_m0_limiter:rsp_src_ready
	wire  [11:0] peripheral_bridge_m0_limiter_rsp_src_channel;                            // peripheral_bridge_m0_limiter:rsp_src_channel -> peripheral_bridge_m0_agent:rp_channel
	wire         peripheral_bridge_m0_limiter_rsp_src_startofpacket;                      // peripheral_bridge_m0_limiter:rsp_src_startofpacket -> peripheral_bridge_m0_agent:rp_startofpacket
	wire         peripheral_bridge_m0_limiter_rsp_src_endofpacket;                        // peripheral_bridge_m0_limiter:rsp_src_endofpacket -> peripheral_bridge_m0_agent:rp_endofpacket
	wire         cmd_demux_src0_valid;                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [84:0] cmd_demux_src0_data;                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [11:0] cmd_demux_src0_channel;                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                    // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [84:0] cmd_demux_src1_data;                                                     // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                    // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire  [11:0] cmd_demux_src1_channel;                                                  // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                            // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                              // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                    // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [84:0] cmd_demux_src2_data;                                                     // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                    // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [11:0] cmd_demux_src2_channel;                                                  // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                            // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                              // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                    // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [84:0] cmd_demux_src3_data;                                                     // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                    // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [11:0] cmd_demux_src3_channel;                                                  // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                            // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                              // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                                    // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [84:0] cmd_demux_src4_data;                                                     // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                                    // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [11:0] cmd_demux_src4_channel;                                                  // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                            // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                              // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                    // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [84:0] cmd_demux_src5_data;                                                     // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                                    // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [11:0] cmd_demux_src5_channel;                                                  // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                            // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                              // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                    // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [84:0] cmd_demux_src6_data;                                                     // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                                    // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [11:0] cmd_demux_src6_channel;                                                  // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                            // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                              // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                    // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [84:0] cmd_demux_src7_data;                                                     // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                                    // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [11:0] cmd_demux_src7_channel;                                                  // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                            // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                              // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                                    // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [84:0] cmd_demux_src8_data;                                                     // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                                    // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [11:0] cmd_demux_src8_channel;                                                  // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                            // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                              // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                                    // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [84:0] cmd_demux_src9_data;                                                     // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                                    // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [11:0] cmd_demux_src9_channel;                                                  // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                            // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                              // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                                   // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [84:0] cmd_demux_src10_data;                                                    // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                                   // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [11:0] cmd_demux_src10_channel;                                                 // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                           // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                             // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                                   // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [84:0] cmd_demux_src11_data;                                                    // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                                   // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [11:0] cmd_demux_src11_channel;                                                 // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                           // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                             // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [84:0] rsp_demux_src0_data;                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [11:0] rsp_demux_src0_channel;                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [84:0] rsp_demux_001_src0_data;                                                 // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire  [11:0] rsp_demux_001_src0_channel;                                              // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                        // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                          // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [84:0] rsp_demux_002_src0_data;                                                 // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [11:0] rsp_demux_002_src0_channel;                                              // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                        // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                          // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [84:0] rsp_demux_003_src0_data;                                                 // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [11:0] rsp_demux_003_src0_channel;                                              // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                        // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                          // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [84:0] rsp_demux_004_src0_data;                                                 // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                                // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [11:0] rsp_demux_004_src0_channel;                                              // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                        // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                          // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [84:0] rsp_demux_005_src0_data;                                                 // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                                // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [11:0] rsp_demux_005_src0_channel;                                              // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                        // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                          // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [84:0] rsp_demux_006_src0_data;                                                 // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                                // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [11:0] rsp_demux_006_src0_channel;                                              // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                        // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                          // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [84:0] rsp_demux_007_src0_data;                                                 // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                                // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [11:0] rsp_demux_007_src0_channel;                                              // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                        // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                          // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [84:0] rsp_demux_008_src0_data;                                                 // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                                // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [11:0] rsp_demux_008_src0_channel;                                              // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                        // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                          // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [84:0] rsp_demux_009_src0_data;                                                 // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                                // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [11:0] rsp_demux_009_src0_channel;                                              // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                        // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                          // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [84:0] rsp_demux_010_src0_data;                                                 // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                                // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [11:0] rsp_demux_010_src0_channel;                                              // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                        // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                          // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [84:0] rsp_demux_011_src0_data;                                                 // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                                // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [11:0] rsp_demux_011_src0_channel;                                              // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                        // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                          // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire  [11:0] peripheral_bridge_m0_limiter_cmd_valid_data;                             // peripheral_bridge_m0_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         dual_boot_0_avalon_agent_rdata_fifo_src_valid;                           // dual_boot_0_avalon_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] dual_boot_0_avalon_agent_rdata_fifo_src_data;                            // dual_boot_0_avalon_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         dual_boot_0_avalon_agent_rdata_fifo_src_ready;                           // avalon_st_adapter:in_0_ready -> dual_boot_0_avalon_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                           // avalon_st_adapter:out_0_valid -> dual_boot_0_avalon_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                            // avalon_st_adapter:out_0_data -> dual_boot_0_avalon_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                           // dual_boot_0_avalon_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                           // avalon_st_adapter:out_0_error -> dual_boot_0_avalon_agent:rdata_fifo_sink_error
	wire         pfc_avalon_slave_agent_rdata_fifo_src_valid;                             // pfc_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] pfc_avalon_slave_agent_rdata_fifo_src_data;                              // pfc_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         pfc_avalon_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_001:in_0_ready -> pfc_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                       // avalon_st_adapter_001:out_0_valid -> pfc_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                        // avalon_st_adapter_001:out_0_data -> pfc_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                       // pfc_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                       // avalon_st_adapter_001:out_0_error -> pfc_avalon_slave_agent:rdata_fifo_sink_error
	wire         servo_avalon_slave_agent_rdata_fifo_src_valid;                           // servo_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] servo_avalon_slave_agent_rdata_fifo_src_data;                            // servo_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         servo_avalon_slave_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_002:in_0_ready -> servo_avalon_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                       // avalon_st_adapter_002:out_0_valid -> servo_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                        // avalon_st_adapter_002:out_0_data -> servo_avalon_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                       // servo_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                       // avalon_st_adapter_002:out_0_error -> servo_avalon_slave_agent:rdata_fifo_sink_error
	wire         chipid_chipid_agent_rdata_fifo_src_valid;                                // chipid_chipid_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] chipid_chipid_agent_rdata_fifo_src_data;                                 // chipid_chipid_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         chipid_chipid_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_003:in_0_ready -> chipid_chipid_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                       // avalon_st_adapter_003:out_0_valid -> chipid_chipid_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                        // avalon_st_adapter_003:out_0_data -> chipid_chipid_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                       // chipid_chipid_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                       // avalon_st_adapter_003:out_0_error -> chipid_chipid_agent:rdata_fifo_sink_error
	wire         sysid_control_slave_agent_rdata_fifo_src_valid;                          // sysid_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] sysid_control_slave_agent_rdata_fifo_src_data;                           // sysid_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         sysid_control_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_004:in_0_ready -> sysid_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                       // avalon_st_adapter_004:out_0_valid -> sysid_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                        // avalon_st_adapter_004:out_0_data -> sysid_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                       // sysid_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                       // avalon_st_adapter_004:out_0_error -> sysid_control_slave_agent:rdata_fifo_sink_error
	wire         systimer_s1_agent_rdata_fifo_src_valid;                                  // systimer_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] systimer_s1_agent_rdata_fifo_src_data;                                   // systimer_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         systimer_s1_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_005:in_0_ready -> systimer_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                       // avalon_st_adapter_005:out_0_valid -> systimer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                        // avalon_st_adapter_005:out_0_data -> systimer_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                       // systimer_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                       // avalon_st_adapter_005:out_0_error -> systimer_s1_agent:rdata_fifo_sink_error
	wire         uart0_s1_agent_rdata_fifo_src_valid;                                     // uart0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] uart0_s1_agent_rdata_fifo_src_data;                                      // uart0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         uart0_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_006:in_0_ready -> uart0_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                       // avalon_st_adapter_006:out_0_valid -> uart0_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                        // avalon_st_adapter_006:out_0_data -> uart0_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                       // uart0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                       // avalon_st_adapter_006:out_0_error -> uart0_s1_agent:rdata_fifo_sink_error
	wire         uart1_s1_agent_rdata_fifo_src_valid;                                     // uart1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] uart1_s1_agent_rdata_fifo_src_data;                                      // uart1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         uart1_s1_agent_rdata_fifo_src_ready;                                     // avalon_st_adapter_007:in_0_ready -> uart1_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                       // avalon_st_adapter_007:out_0_valid -> uart1_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                        // avalon_st_adapter_007:out_0_data -> uart1_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                       // uart1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                       // avalon_st_adapter_007:out_0_error -> uart1_s1_agent:rdata_fifo_sink_error
	wire         spi_s1_agent_rdata_fifo_src_valid;                                       // spi_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] spi_s1_agent_rdata_fifo_src_data;                                        // spi_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         spi_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_008:in_0_ready -> spi_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                       // avalon_st_adapter_008:out_0_valid -> spi_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                        // avalon_st_adapter_008:out_0_data -> spi_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                       // spi_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                       // avalon_st_adapter_008:out_0_error -> spi_s1_agent:rdata_fifo_sink_error
	wire         i2c_s1_agent_rdata_fifo_src_valid;                                       // i2c_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [33:0] i2c_s1_agent_rdata_fifo_src_data;                                        // i2c_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         i2c_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_009:in_0_ready -> i2c_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                       // avalon_st_adapter_009:out_0_valid -> i2c_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_009_out_0_data;                                        // avalon_st_adapter_009:out_0_data -> i2c_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                       // i2c_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                       // avalon_st_adapter_009:out_0_error -> i2c_s1_agent:rdata_fifo_sink_error
	wire         hostbridge_s1_agent_rdata_fifo_src_valid;                                // hostbridge_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [33:0] hostbridge_s1_agent_rdata_fifo_src_data;                                 // hostbridge_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         hostbridge_s1_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_010:in_0_ready -> hostbridge_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                       // avalon_st_adapter_010:out_0_valid -> hostbridge_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_010_out_0_data;                                        // avalon_st_adapter_010:out_0_data -> hostbridge_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                       // hostbridge_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                       // avalon_st_adapter_010:out_0_error -> hostbridge_s1_agent:rdata_fifo_sink_error
	wire         led_s1_agent_rdata_fifo_src_valid;                                       // led_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [33:0] led_s1_agent_rdata_fifo_src_data;                                        // led_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         led_s1_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_011:in_0_ready -> led_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                       // avalon_st_adapter_011:out_0_valid -> led_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_011_out_0_data;                                        // avalon_st_adapter_011:out_0_data -> led_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                       // led_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                       // avalon_st_adapter_011:out_0_error -> led_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (9),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) peripheral_bridge_m0_translator (
		.clk                    (peri_clk_clk_clk),                                                        //                       clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (peripheral_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (peripheral_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (peripheral_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (peripheral_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (peripheral_bridge_m0_read),                                               //                          .read
		.av_readdata            (peripheral_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (peripheral_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (peripheral_bridge_m0_write),                                              //                          .write
		.av_writedata           (peripheral_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (peripheral_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) dual_boot_0_avalon_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (dual_boot_0_avalon_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (dual_boot_0_avalon_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (dual_boot_0_avalon_agent_m0_read),                       //                         .read
		.uav_write              (dual_boot_0_avalon_agent_m0_write),                      //                         .write
		.uav_waitrequest        (dual_boot_0_avalon_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (dual_boot_0_avalon_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (dual_boot_0_avalon_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (dual_boot_0_avalon_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (dual_boot_0_avalon_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (dual_boot_0_avalon_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (dual_boot_0_avalon_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (dual_boot_0_avalon_address),                             //      avalon_anti_slave_0.address
		.av_write               (dual_boot_0_avalon_write),                               //                         .write
		.av_read                (dual_boot_0_avalon_read),                                //                         .read
		.av_readdata            (dual_boot_0_avalon_readdata),                            //                         .readdata
		.av_writedata           (dual_boot_0_avalon_writedata),                           //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pfc_avalon_slave_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pfc_avalon_slave_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (pfc_avalon_slave_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (pfc_avalon_slave_agent_m0_read),                         //                         .read
		.uav_write              (pfc_avalon_slave_agent_m0_write),                        //                         .write
		.uav_waitrequest        (pfc_avalon_slave_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (pfc_avalon_slave_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (pfc_avalon_slave_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (pfc_avalon_slave_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (pfc_avalon_slave_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (pfc_avalon_slave_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (pfc_avalon_slave_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (pfc_avalon_slave_address),                               //      avalon_anti_slave_0.address
		.av_write               (pfc_avalon_slave_write),                                 //                         .write
		.av_read                (pfc_avalon_slave_read),                                  //                         .read
		.av_readdata            (pfc_avalon_slave_readdata),                              //                         .readdata
		.av_writedata           (pfc_avalon_slave_writedata),                             //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) servo_avalon_slave_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (servo_avalon_slave_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (servo_avalon_slave_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (servo_avalon_slave_agent_m0_read),                       //                         .read
		.uav_write              (servo_avalon_slave_agent_m0_write),                      //                         .write
		.uav_waitrequest        (servo_avalon_slave_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (servo_avalon_slave_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (servo_avalon_slave_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (servo_avalon_slave_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (servo_avalon_slave_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (servo_avalon_slave_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (servo_avalon_slave_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (servo_avalon_slave_address),                             //      avalon_anti_slave_0.address
		.av_write               (servo_avalon_slave_write),                               //                         .write
		.av_read                (servo_avalon_slave_read),                                //                         .read
		.av_readdata            (servo_avalon_slave_readdata),                            //                         .readdata
		.av_writedata           (servo_avalon_slave_writedata),                           //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) chipid_chipid_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (chipid_chipid_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (chipid_chipid_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (chipid_chipid_agent_m0_read),                            //                         .read
		.uav_write              (chipid_chipid_agent_m0_write),                           //                         .write
		.uav_waitrequest        (chipid_chipid_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (chipid_chipid_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (chipid_chipid_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (chipid_chipid_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (chipid_chipid_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (chipid_chipid_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (chipid_chipid_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (chipid_chipid_address),                                  //      avalon_anti_slave_0.address
		.av_read                (chipid_chipid_read),                                     //                         .read
		.av_readdata            (chipid_chipid_readdata),                                 //                         .readdata
		.av_waitrequest         (chipid_chipid_waitrequest),                              //                         .waitrequest
		.av_write               (),                                                       //              (terminated)
		.av_writedata           (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_control_slave_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sysid_control_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_control_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sysid_control_slave_agent_m0_read),                      //                         .read
		.uav_write              (sysid_control_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sysid_control_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sysid_control_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sysid_control_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sysid_control_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sysid_control_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sysid_control_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sysid_control_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sysid_control_slave_address),                            //      avalon_anti_slave_0.address
		.av_readdata            (sysid_control_slave_readdata),                           //                         .readdata
		.av_write               (),                                                       //              (terminated)
		.av_read                (),                                                       //              (terminated)
		.av_writedata           (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) systimer_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (systimer_s1_agent_m0_address),                           // avalon_universal_slave_0.address
		.uav_burstcount         (systimer_s1_agent_m0_burstcount),                        //                         .burstcount
		.uav_read               (systimer_s1_agent_m0_read),                              //                         .read
		.uav_write              (systimer_s1_agent_m0_write),                             //                         .write
		.uav_waitrequest        (systimer_s1_agent_m0_waitrequest),                       //                         .waitrequest
		.uav_readdatavalid      (systimer_s1_agent_m0_readdatavalid),                     //                         .readdatavalid
		.uav_byteenable         (systimer_s1_agent_m0_byteenable),                        //                         .byteenable
		.uav_readdata           (systimer_s1_agent_m0_readdata),                          //                         .readdata
		.uav_writedata          (systimer_s1_agent_m0_writedata),                         //                         .writedata
		.uav_lock               (systimer_s1_agent_m0_lock),                              //                         .lock
		.uav_debugaccess        (systimer_s1_agent_m0_debugaccess),                       //                         .debugaccess
		.av_address             (systimer_s1_address),                                    //      avalon_anti_slave_0.address
		.av_write               (systimer_s1_write),                                      //                         .write
		.av_readdata            (systimer_s1_readdata),                                   //                         .readdata
		.av_writedata           (systimer_s1_writedata),                                  //                         .writedata
		.av_chipselect          (systimer_s1_chipselect),                                 //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart0_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart0_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (uart0_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (uart0_s1_agent_m0_read),                                 //                         .read
		.uav_write              (uart0_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (uart0_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (uart0_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (uart0_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (uart0_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (uart0_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (uart0_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (uart0_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (uart0_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (uart0_s1_write),                                         //                         .write
		.av_read                (uart0_s1_read),                                          //                         .read
		.av_readdata            (uart0_s1_readdata),                                      //                         .readdata
		.av_writedata           (uart0_s1_writedata),                                     //                         .writedata
		.av_begintransfer       (uart0_s1_begintransfer),                                 //                         .begintransfer
		.av_chipselect          (uart0_s1_chipselect),                                    //                         .chipselect
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) uart1_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (uart1_s1_agent_m0_address),                              // avalon_universal_slave_0.address
		.uav_burstcount         (uart1_s1_agent_m0_burstcount),                           //                         .burstcount
		.uav_read               (uart1_s1_agent_m0_read),                                 //                         .read
		.uav_write              (uart1_s1_agent_m0_write),                                //                         .write
		.uav_waitrequest        (uart1_s1_agent_m0_waitrequest),                          //                         .waitrequest
		.uav_readdatavalid      (uart1_s1_agent_m0_readdatavalid),                        //                         .readdatavalid
		.uav_byteenable         (uart1_s1_agent_m0_byteenable),                           //                         .byteenable
		.uav_readdata           (uart1_s1_agent_m0_readdata),                             //                         .readdata
		.uav_writedata          (uart1_s1_agent_m0_writedata),                            //                         .writedata
		.uav_lock               (uart1_s1_agent_m0_lock),                                 //                         .lock
		.uav_debugaccess        (uart1_s1_agent_m0_debugaccess),                          //                         .debugaccess
		.av_address             (uart1_s1_address),                                       //      avalon_anti_slave_0.address
		.av_write               (uart1_s1_write),                                         //                         .write
		.av_read                (uart1_s1_read),                                          //                         .read
		.av_readdata            (uart1_s1_readdata),                                      //                         .readdata
		.av_writedata           (uart1_s1_writedata),                                     //                         .writedata
		.av_begintransfer       (uart1_s1_begintransfer),                                 //                         .begintransfer
		.av_chipselect          (uart1_s1_chipselect),                                    //                         .chipselect
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (spi_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (spi_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (spi_s1_agent_m0_read),                                   //                         .read
		.uav_write              (spi_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (spi_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (spi_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (spi_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (spi_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (spi_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (spi_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (spi_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (spi_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (spi_s1_write),                                           //                         .write
		.av_read                (spi_s1_read),                                            //                         .read
		.av_readdata            (spi_s1_readdata),                                        //                         .readdata
		.av_writedata           (spi_s1_writedata),                                       //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (i2c_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (i2c_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (i2c_s1_agent_m0_read),                                   //                         .read
		.uav_write              (i2c_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (i2c_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (i2c_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (i2c_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (i2c_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (i2c_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (i2c_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (i2c_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (i2c_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (i2c_s1_write),                                           //                         .write
		.av_read                (i2c_s1_read),                                            //                         .read
		.av_readdata            (i2c_s1_readdata),                                        //                         .readdata
		.av_writedata           (i2c_s1_writedata),                                       //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hostbridge_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hostbridge_s1_agent_m0_address),                         // avalon_universal_slave_0.address
		.uav_burstcount         (hostbridge_s1_agent_m0_burstcount),                      //                         .burstcount
		.uav_read               (hostbridge_s1_agent_m0_read),                            //                         .read
		.uav_write              (hostbridge_s1_agent_m0_write),                           //                         .write
		.uav_waitrequest        (hostbridge_s1_agent_m0_waitrequest),                     //                         .waitrequest
		.uav_readdatavalid      (hostbridge_s1_agent_m0_readdatavalid),                   //                         .readdatavalid
		.uav_byteenable         (hostbridge_s1_agent_m0_byteenable),                      //                         .byteenable
		.uav_readdata           (hostbridge_s1_agent_m0_readdata),                        //                         .readdata
		.uav_writedata          (hostbridge_s1_agent_m0_writedata),                       //                         .writedata
		.uav_lock               (hostbridge_s1_agent_m0_lock),                            //                         .lock
		.uav_debugaccess        (hostbridge_s1_agent_m0_debugaccess),                     //                         .debugaccess
		.av_address             (hostbridge_s1_address),                                  //      avalon_anti_slave_0.address
		.av_write               (hostbridge_s1_write),                                    //                         .write
		.av_read                (hostbridge_s1_read),                                     //                         .read
		.av_readdata            (hostbridge_s1_readdata),                                 //                         .readdata
		.av_writedata           (hostbridge_s1_writedata),                                //                         .writedata
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_chipselect          (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) led_s1_translator (
		.clk                    (peri_clk_clk_clk),                                       //                      clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (led_s1_agent_m0_address),                                // avalon_universal_slave_0.address
		.uav_burstcount         (led_s1_agent_m0_burstcount),                             //                         .burstcount
		.uav_read               (led_s1_agent_m0_read),                                   //                         .read
		.uav_write              (led_s1_agent_m0_write),                                  //                         .write
		.uav_waitrequest        (led_s1_agent_m0_waitrequest),                            //                         .waitrequest
		.uav_readdatavalid      (led_s1_agent_m0_readdatavalid),                          //                         .readdatavalid
		.uav_byteenable         (led_s1_agent_m0_byteenable),                             //                         .byteenable
		.uav_readdata           (led_s1_agent_m0_readdata),                               //                         .readdata
		.uav_writedata          (led_s1_agent_m0_writedata),                              //                         .writedata
		.uav_lock               (led_s1_agent_m0_lock),                                   //                         .lock
		.uav_debugaccess        (led_s1_agent_m0_debugaccess),                            //                         .debugaccess
		.av_address             (led_s1_address),                                         //      avalon_anti_slave_0.address
		.av_write               (led_s1_write),                                           //                         .write
		.av_readdata            (led_s1_readdata),                                        //                         .readdata
		.av_writedata           (led_s1_writedata),                                       //                         .writedata
		.av_chipselect          (led_s1_chipselect),                                      //                         .chipselect
		.av_read                (),                                                       //              (terminated)
		.av_begintransfer       (),                                                       //              (terminated)
		.av_beginbursttransfer  (),                                                       //              (terminated)
		.av_burstcount          (),                                                       //              (terminated)
		.av_byteenable          (),                                                       //              (terminated)
		.av_readdatavalid       (1'b0),                                                   //              (terminated)
		.av_waitrequest         (1'b0),                                                   //              (terminated)
		.av_writebyteenable     (),                                                       //              (terminated)
		.av_lock                (),                                                       //              (terminated)
		.av_clken               (),                                                       //              (terminated)
		.uav_clken              (1'b0),                                                   //              (terminated)
		.av_debugaccess         (),                                                       //              (terminated)
		.av_outputenable        (),                                                       //              (terminated)
		.uav_response           (),                                                       //              (terminated)
		.av_response            (2'b00),                                                  //              (terminated)
		.uav_writeresponsevalid (),                                                       //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                    //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (79),
		.PKT_CACHE_L               (76),
		.PKT_THREAD_ID_H           (72),
		.PKT_THREAD_ID_L           (72),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) peripheral_bridge_m0_agent (
		.clk                   (peri_clk_clk_clk),                                                        //       clk.clk
		.reset                 (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (peripheral_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (peripheral_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (peripheral_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (peripheral_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (peripheral_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (peripheral_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (peripheral_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (peripheral_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (peripheral_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (peripheral_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (peripheral_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (peripheral_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (peripheral_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (peripheral_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (peripheral_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (peripheral_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (peripheral_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (peripheral_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (peripheral_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (peripheral_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (peripheral_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (peripheral_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) dual_boot_0_avalon_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (dual_boot_0_avalon_agent_m0_address),                    //              m0.address
		.m0_burstcount           (dual_boot_0_avalon_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (dual_boot_0_avalon_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (dual_boot_0_avalon_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (dual_boot_0_avalon_agent_m0_lock),                       //                .lock
		.m0_readdata             (dual_boot_0_avalon_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (dual_boot_0_avalon_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (dual_boot_0_avalon_agent_m0_read),                       //                .read
		.m0_waitrequest          (dual_boot_0_avalon_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (dual_boot_0_avalon_agent_m0_writedata),                  //                .writedata
		.m0_write                (dual_boot_0_avalon_agent_m0_write),                      //                .write
		.rp_endofpacket          (dual_boot_0_avalon_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (dual_boot_0_avalon_agent_rp_ready),                      //                .ready
		.rp_valid                (dual_boot_0_avalon_agent_rp_valid),                      //                .valid
		.rp_data                 (dual_boot_0_avalon_agent_rp_data),                       //                .data
		.rp_startofpacket        (dual_boot_0_avalon_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (dual_boot_0_avalon_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (dual_boot_0_avalon_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (dual_boot_0_avalon_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (dual_boot_0_avalon_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (dual_boot_0_avalon_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (dual_boot_0_avalon_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (dual_boot_0_avalon_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (dual_boot_0_avalon_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (dual_boot_0_avalon_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (dual_boot_0_avalon_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                          //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                           //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                          //                .error
		.rdata_fifo_src_ready    (dual_boot_0_avalon_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (dual_boot_0_avalon_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (dual_boot_0_avalon_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) dual_boot_0_avalon_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (dual_boot_0_avalon_agent_rf_source_data),                //        in.data
		.in_valid          (dual_boot_0_avalon_agent_rf_source_valid),               //          .valid
		.in_ready          (dual_boot_0_avalon_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (dual_boot_0_avalon_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (dual_boot_0_avalon_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (dual_boot_0_avalon_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (dual_boot_0_avalon_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (dual_boot_0_avalon_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (dual_boot_0_avalon_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (dual_boot_0_avalon_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pfc_avalon_slave_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pfc_avalon_slave_agent_m0_address),                      //              m0.address
		.m0_burstcount           (pfc_avalon_slave_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (pfc_avalon_slave_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (pfc_avalon_slave_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (pfc_avalon_slave_agent_m0_lock),                         //                .lock
		.m0_readdata             (pfc_avalon_slave_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (pfc_avalon_slave_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (pfc_avalon_slave_agent_m0_read),                         //                .read
		.m0_waitrequest          (pfc_avalon_slave_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (pfc_avalon_slave_agent_m0_writedata),                    //                .writedata
		.m0_write                (pfc_avalon_slave_agent_m0_write),                        //                .write
		.rp_endofpacket          (pfc_avalon_slave_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (pfc_avalon_slave_agent_rp_ready),                        //                .ready
		.rp_valid                (pfc_avalon_slave_agent_rp_valid),                        //                .valid
		.rp_data                 (pfc_avalon_slave_agent_rp_data),                         //                .data
		.rp_startofpacket        (pfc_avalon_slave_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                //                .channel
		.rf_sink_ready           (pfc_avalon_slave_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (pfc_avalon_slave_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (pfc_avalon_slave_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (pfc_avalon_slave_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (pfc_avalon_slave_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (pfc_avalon_slave_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (pfc_avalon_slave_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (pfc_avalon_slave_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (pfc_avalon_slave_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (pfc_avalon_slave_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (pfc_avalon_slave_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pfc_avalon_slave_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (pfc_avalon_slave_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pfc_avalon_slave_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pfc_avalon_slave_agent_rf_source_data),                  //        in.data
		.in_valid          (pfc_avalon_slave_agent_rf_source_valid),                 //          .valid
		.in_ready          (pfc_avalon_slave_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (pfc_avalon_slave_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (pfc_avalon_slave_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (pfc_avalon_slave_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (pfc_avalon_slave_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (pfc_avalon_slave_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (pfc_avalon_slave_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (pfc_avalon_slave_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) servo_avalon_slave_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (servo_avalon_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (servo_avalon_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (servo_avalon_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (servo_avalon_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (servo_avalon_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (servo_avalon_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (servo_avalon_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (servo_avalon_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (servo_avalon_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (servo_avalon_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (servo_avalon_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (servo_avalon_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (servo_avalon_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (servo_avalon_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (servo_avalon_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (servo_avalon_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                //                .channel
		.rf_sink_ready           (servo_avalon_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (servo_avalon_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (servo_avalon_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (servo_avalon_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (servo_avalon_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (servo_avalon_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (servo_avalon_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (servo_avalon_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (servo_avalon_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (servo_avalon_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (servo_avalon_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (servo_avalon_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (servo_avalon_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) servo_avalon_slave_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (servo_avalon_slave_agent_rf_source_data),                //        in.data
		.in_valid          (servo_avalon_slave_agent_rf_source_valid),               //          .valid
		.in_ready          (servo_avalon_slave_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (servo_avalon_slave_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (servo_avalon_slave_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (servo_avalon_slave_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (servo_avalon_slave_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (servo_avalon_slave_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (servo_avalon_slave_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (servo_avalon_slave_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) chipid_chipid_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (chipid_chipid_agent_m0_address),                         //              m0.address
		.m0_burstcount           (chipid_chipid_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (chipid_chipid_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (chipid_chipid_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (chipid_chipid_agent_m0_lock),                            //                .lock
		.m0_readdata             (chipid_chipid_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (chipid_chipid_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (chipid_chipid_agent_m0_read),                            //                .read
		.m0_waitrequest          (chipid_chipid_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (chipid_chipid_agent_m0_writedata),                       //                .writedata
		.m0_write                (chipid_chipid_agent_m0_write),                           //                .write
		.rp_endofpacket          (chipid_chipid_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (chipid_chipid_agent_rp_ready),                           //                .ready
		.rp_valid                (chipid_chipid_agent_rp_valid),                           //                .valid
		.rp_data                 (chipid_chipid_agent_rp_data),                            //                .data
		.rp_startofpacket        (chipid_chipid_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (chipid_chipid_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (chipid_chipid_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (chipid_chipid_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (chipid_chipid_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (chipid_chipid_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (chipid_chipid_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (chipid_chipid_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (chipid_chipid_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (chipid_chipid_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (chipid_chipid_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (chipid_chipid_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (chipid_chipid_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (chipid_chipid_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) chipid_chipid_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (chipid_chipid_agent_rf_source_data),                     //        in.data
		.in_valid          (chipid_chipid_agent_rf_source_valid),                    //          .valid
		.in_ready          (chipid_chipid_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (chipid_chipid_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (chipid_chipid_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (chipid_chipid_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (chipid_chipid_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (chipid_chipid_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (chipid_chipid_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (chipid_chipid_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_control_slave_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sysid_control_slave_agent_m0_address),                   //              m0.address
		.m0_burstcount           (sysid_control_slave_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (sysid_control_slave_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (sysid_control_slave_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (sysid_control_slave_agent_m0_lock),                      //                .lock
		.m0_readdata             (sysid_control_slave_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (sysid_control_slave_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (sysid_control_slave_agent_m0_read),                      //                .read
		.m0_waitrequest          (sysid_control_slave_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (sysid_control_slave_agent_m0_writedata),                 //                .writedata
		.m0_write                (sysid_control_slave_agent_m0_write),                     //                .write
		.rp_endofpacket          (sysid_control_slave_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (sysid_control_slave_agent_rp_ready),                     //                .ready
		.rp_valid                (sysid_control_slave_agent_rp_valid),                     //                .valid
		.rp_data                 (sysid_control_slave_agent_rp_data),                      //                .data
		.rp_startofpacket        (sysid_control_slave_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                //                .channel
		.rf_sink_ready           (sysid_control_slave_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (sysid_control_slave_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (sysid_control_slave_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (sysid_control_slave_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (sysid_control_slave_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (sysid_control_slave_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (sysid_control_slave_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (sysid_control_slave_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (sysid_control_slave_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (sysid_control_slave_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (sysid_control_slave_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_control_slave_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (sysid_control_slave_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_control_slave_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sysid_control_slave_agent_rf_source_data),               //        in.data
		.in_valid          (sysid_control_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (sysid_control_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sysid_control_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sysid_control_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sysid_control_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sysid_control_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sysid_control_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sysid_control_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sysid_control_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) systimer_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (systimer_s1_agent_m0_address),                           //              m0.address
		.m0_burstcount           (systimer_s1_agent_m0_burstcount),                        //                .burstcount
		.m0_byteenable           (systimer_s1_agent_m0_byteenable),                        //                .byteenable
		.m0_debugaccess          (systimer_s1_agent_m0_debugaccess),                       //                .debugaccess
		.m0_lock                 (systimer_s1_agent_m0_lock),                              //                .lock
		.m0_readdata             (systimer_s1_agent_m0_readdata),                          //                .readdata
		.m0_readdatavalid        (systimer_s1_agent_m0_readdatavalid),                     //                .readdatavalid
		.m0_read                 (systimer_s1_agent_m0_read),                              //                .read
		.m0_waitrequest          (systimer_s1_agent_m0_waitrequest),                       //                .waitrequest
		.m0_writedata            (systimer_s1_agent_m0_writedata),                         //                .writedata
		.m0_write                (systimer_s1_agent_m0_write),                             //                .write
		.rp_endofpacket          (systimer_s1_agent_rp_endofpacket),                       //              rp.endofpacket
		.rp_ready                (systimer_s1_agent_rp_ready),                             //                .ready
		.rp_valid                (systimer_s1_agent_rp_valid),                             //                .valid
		.rp_data                 (systimer_s1_agent_rp_data),                              //                .data
		.rp_startofpacket        (systimer_s1_agent_rp_startofpacket),                     //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                //                .channel
		.rf_sink_ready           (systimer_s1_agent_rsp_fifo_out_ready),                   //         rf_sink.ready
		.rf_sink_valid           (systimer_s1_agent_rsp_fifo_out_valid),                   //                .valid
		.rf_sink_startofpacket   (systimer_s1_agent_rsp_fifo_out_startofpacket),           //                .startofpacket
		.rf_sink_endofpacket     (systimer_s1_agent_rsp_fifo_out_endofpacket),             //                .endofpacket
		.rf_sink_data            (systimer_s1_agent_rsp_fifo_out_data),                    //                .data
		.rf_source_ready         (systimer_s1_agent_rf_source_ready),                      //       rf_source.ready
		.rf_source_valid         (systimer_s1_agent_rf_source_valid),                      //                .valid
		.rf_source_startofpacket (systimer_s1_agent_rf_source_startofpacket),              //                .startofpacket
		.rf_source_endofpacket   (systimer_s1_agent_rf_source_endofpacket),                //                .endofpacket
		.rf_source_data          (systimer_s1_agent_rf_source_data),                       //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (systimer_s1_agent_rdata_fifo_src_ready),                 //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (systimer_s1_agent_rdata_fifo_src_valid),                 //                .valid
		.rdata_fifo_src_data     (systimer_s1_agent_rdata_fifo_src_data),                  //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) systimer_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (systimer_s1_agent_rf_source_data),                       //        in.data
		.in_valid          (systimer_s1_agent_rf_source_valid),                      //          .valid
		.in_ready          (systimer_s1_agent_rf_source_ready),                      //          .ready
		.in_startofpacket  (systimer_s1_agent_rf_source_startofpacket),              //          .startofpacket
		.in_endofpacket    (systimer_s1_agent_rf_source_endofpacket),                //          .endofpacket
		.out_data          (systimer_s1_agent_rsp_fifo_out_data),                    //       out.data
		.out_valid         (systimer_s1_agent_rsp_fifo_out_valid),                   //          .valid
		.out_ready         (systimer_s1_agent_rsp_fifo_out_ready),                   //          .ready
		.out_startofpacket (systimer_s1_agent_rsp_fifo_out_startofpacket),           //          .startofpacket
		.out_endofpacket   (systimer_s1_agent_rsp_fifo_out_endofpacket),             //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart0_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart0_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (uart0_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (uart0_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (uart0_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (uart0_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (uart0_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (uart0_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (uart0_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (uart0_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (uart0_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (uart0_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (uart0_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (uart0_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (uart0_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (uart0_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (uart0_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                                //                .channel
		.rf_sink_ready           (uart0_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (uart0_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (uart0_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (uart0_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (uart0_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (uart0_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (uart0_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (uart0_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (uart0_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (uart0_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (uart0_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart0_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (uart0_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart0_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart0_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (uart0_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (uart0_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (uart0_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (uart0_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (uart0_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (uart0_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (uart0_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (uart0_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (uart0_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) uart1_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (uart1_s1_agent_m0_address),                              //              m0.address
		.m0_burstcount           (uart1_s1_agent_m0_burstcount),                           //                .burstcount
		.m0_byteenable           (uart1_s1_agent_m0_byteenable),                           //                .byteenable
		.m0_debugaccess          (uart1_s1_agent_m0_debugaccess),                          //                .debugaccess
		.m0_lock                 (uart1_s1_agent_m0_lock),                                 //                .lock
		.m0_readdata             (uart1_s1_agent_m0_readdata),                             //                .readdata
		.m0_readdatavalid        (uart1_s1_agent_m0_readdatavalid),                        //                .readdatavalid
		.m0_read                 (uart1_s1_agent_m0_read),                                 //                .read
		.m0_waitrequest          (uart1_s1_agent_m0_waitrequest),                          //                .waitrequest
		.m0_writedata            (uart1_s1_agent_m0_writedata),                            //                .writedata
		.m0_write                (uart1_s1_agent_m0_write),                                //                .write
		.rp_endofpacket          (uart1_s1_agent_rp_endofpacket),                          //              rp.endofpacket
		.rp_ready                (uart1_s1_agent_rp_ready),                                //                .ready
		.rp_valid                (uart1_s1_agent_rp_valid),                                //                .valid
		.rp_data                 (uart1_s1_agent_rp_data),                                 //                .data
		.rp_startofpacket        (uart1_s1_agent_rp_startofpacket),                        //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                                //                .channel
		.rf_sink_ready           (uart1_s1_agent_rsp_fifo_out_ready),                      //         rf_sink.ready
		.rf_sink_valid           (uart1_s1_agent_rsp_fifo_out_valid),                      //                .valid
		.rf_sink_startofpacket   (uart1_s1_agent_rsp_fifo_out_startofpacket),              //                .startofpacket
		.rf_sink_endofpacket     (uart1_s1_agent_rsp_fifo_out_endofpacket),                //                .endofpacket
		.rf_sink_data            (uart1_s1_agent_rsp_fifo_out_data),                       //                .data
		.rf_source_ready         (uart1_s1_agent_rf_source_ready),                         //       rf_source.ready
		.rf_source_valid         (uart1_s1_agent_rf_source_valid),                         //                .valid
		.rf_source_startofpacket (uart1_s1_agent_rf_source_startofpacket),                 //                .startofpacket
		.rf_source_endofpacket   (uart1_s1_agent_rf_source_endofpacket),                   //                .endofpacket
		.rf_source_data          (uart1_s1_agent_rf_source_data),                          //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (uart1_s1_agent_rdata_fifo_src_ready),                    //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (uart1_s1_agent_rdata_fifo_src_valid),                    //                .valid
		.rdata_fifo_src_data     (uart1_s1_agent_rdata_fifo_src_data),                     //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) uart1_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (uart1_s1_agent_rf_source_data),                          //        in.data
		.in_valid          (uart1_s1_agent_rf_source_valid),                         //          .valid
		.in_ready          (uart1_s1_agent_rf_source_ready),                         //          .ready
		.in_startofpacket  (uart1_s1_agent_rf_source_startofpacket),                 //          .startofpacket
		.in_endofpacket    (uart1_s1_agent_rf_source_endofpacket),                   //          .endofpacket
		.out_data          (uart1_s1_agent_rsp_fifo_out_data),                       //       out.data
		.out_valid         (uart1_s1_agent_rsp_fifo_out_valid),                      //          .valid
		.out_ready         (uart1_s1_agent_rsp_fifo_out_ready),                      //          .ready
		.out_startofpacket (uart1_s1_agent_rsp_fifo_out_startofpacket),              //          .startofpacket
		.out_endofpacket   (uart1_s1_agent_rsp_fifo_out_endofpacket),                //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (spi_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (spi_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (spi_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (spi_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (spi_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (spi_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (spi_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (spi_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (spi_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (spi_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (spi_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (spi_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (spi_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (spi_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (spi_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (spi_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                //                .channel
		.rf_sink_ready           (spi_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (spi_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (spi_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (spi_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (spi_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (spi_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (spi_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (spi_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (spi_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (spi_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (spi_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (spi_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (spi_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (spi_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (spi_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (spi_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (spi_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (spi_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (spi_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (spi_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (spi_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (spi_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) i2c_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (i2c_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (i2c_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (i2c_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (i2c_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (i2c_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (i2c_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (i2c_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (i2c_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (i2c_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (i2c_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (i2c_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (i2c_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (i2c_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (i2c_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (i2c_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (i2c_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                //                .channel
		.rf_sink_ready           (i2c_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (i2c_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (i2c_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (i2c_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (i2c_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (i2c_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (i2c_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (i2c_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (i2c_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (i2c_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (i2c_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (i2c_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (i2c_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (i2c_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (i2c_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (i2c_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (i2c_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (i2c_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (i2c_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (i2c_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (i2c_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (i2c_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hostbridge_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hostbridge_s1_agent_m0_address),                         //              m0.address
		.m0_burstcount           (hostbridge_s1_agent_m0_burstcount),                      //                .burstcount
		.m0_byteenable           (hostbridge_s1_agent_m0_byteenable),                      //                .byteenable
		.m0_debugaccess          (hostbridge_s1_agent_m0_debugaccess),                     //                .debugaccess
		.m0_lock                 (hostbridge_s1_agent_m0_lock),                            //                .lock
		.m0_readdata             (hostbridge_s1_agent_m0_readdata),                        //                .readdata
		.m0_readdatavalid        (hostbridge_s1_agent_m0_readdatavalid),                   //                .readdatavalid
		.m0_read                 (hostbridge_s1_agent_m0_read),                            //                .read
		.m0_waitrequest          (hostbridge_s1_agent_m0_waitrequest),                     //                .waitrequest
		.m0_writedata            (hostbridge_s1_agent_m0_writedata),                       //                .writedata
		.m0_write                (hostbridge_s1_agent_m0_write),                           //                .write
		.rp_endofpacket          (hostbridge_s1_agent_rp_endofpacket),                     //              rp.endofpacket
		.rp_ready                (hostbridge_s1_agent_rp_ready),                           //                .ready
		.rp_valid                (hostbridge_s1_agent_rp_valid),                           //                .valid
		.rp_data                 (hostbridge_s1_agent_rp_data),                            //                .data
		.rp_startofpacket        (hostbridge_s1_agent_rp_startofpacket),                   //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                //                .channel
		.rf_sink_ready           (hostbridge_s1_agent_rsp_fifo_out_ready),                 //         rf_sink.ready
		.rf_sink_valid           (hostbridge_s1_agent_rsp_fifo_out_valid),                 //                .valid
		.rf_sink_startofpacket   (hostbridge_s1_agent_rsp_fifo_out_startofpacket),         //                .startofpacket
		.rf_sink_endofpacket     (hostbridge_s1_agent_rsp_fifo_out_endofpacket),           //                .endofpacket
		.rf_sink_data            (hostbridge_s1_agent_rsp_fifo_out_data),                  //                .data
		.rf_source_ready         (hostbridge_s1_agent_rf_source_ready),                    //       rf_source.ready
		.rf_source_valid         (hostbridge_s1_agent_rf_source_valid),                    //                .valid
		.rf_source_startofpacket (hostbridge_s1_agent_rf_source_startofpacket),            //                .startofpacket
		.rf_source_endofpacket   (hostbridge_s1_agent_rf_source_endofpacket),              //                .endofpacket
		.rf_source_data          (hostbridge_s1_agent_rf_source_data),                     //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (hostbridge_s1_agent_rdata_fifo_src_ready),               //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hostbridge_s1_agent_rdata_fifo_src_valid),               //                .valid
		.rdata_fifo_src_data     (hostbridge_s1_agent_rdata_fifo_src_data),                //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hostbridge_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hostbridge_s1_agent_rf_source_data),                     //        in.data
		.in_valid          (hostbridge_s1_agent_rf_source_valid),                    //          .valid
		.in_ready          (hostbridge_s1_agent_rf_source_ready),                    //          .ready
		.in_startofpacket  (hostbridge_s1_agent_rf_source_startofpacket),            //          .startofpacket
		.in_endofpacket    (hostbridge_s1_agent_rf_source_endofpacket),              //          .endofpacket
		.out_data          (hostbridge_s1_agent_rsp_fifo_out_data),                  //       out.data
		.out_valid         (hostbridge_s1_agent_rsp_fifo_out_valid),                 //          .valid
		.out_ready         (hostbridge_s1_agent_rsp_fifo_out_ready),                 //          .ready
		.out_startofpacket (hostbridge_s1_agent_rsp_fifo_out_startofpacket),         //          .startofpacket
		.out_endofpacket   (hostbridge_s1_agent_rsp_fifo_out_endofpacket),           //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) led_s1_agent (
		.clk                     (peri_clk_clk_clk),                                       //             clk.clk
		.reset                   (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (led_s1_agent_m0_address),                                //              m0.address
		.m0_burstcount           (led_s1_agent_m0_burstcount),                             //                .burstcount
		.m0_byteenable           (led_s1_agent_m0_byteenable),                             //                .byteenable
		.m0_debugaccess          (led_s1_agent_m0_debugaccess),                            //                .debugaccess
		.m0_lock                 (led_s1_agent_m0_lock),                                   //                .lock
		.m0_readdata             (led_s1_agent_m0_readdata),                               //                .readdata
		.m0_readdatavalid        (led_s1_agent_m0_readdatavalid),                          //                .readdatavalid
		.m0_read                 (led_s1_agent_m0_read),                                   //                .read
		.m0_waitrequest          (led_s1_agent_m0_waitrequest),                            //                .waitrequest
		.m0_writedata            (led_s1_agent_m0_writedata),                              //                .writedata
		.m0_write                (led_s1_agent_m0_write),                                  //                .write
		.rp_endofpacket          (led_s1_agent_rp_endofpacket),                            //              rp.endofpacket
		.rp_ready                (led_s1_agent_rp_ready),                                  //                .ready
		.rp_valid                (led_s1_agent_rp_valid),                                  //                .valid
		.rp_data                 (led_s1_agent_rp_data),                                   //                .data
		.rp_startofpacket        (led_s1_agent_rp_startofpacket),                          //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                //                .channel
		.rf_sink_ready           (led_s1_agent_rsp_fifo_out_ready),                        //         rf_sink.ready
		.rf_sink_valid           (led_s1_agent_rsp_fifo_out_valid),                        //                .valid
		.rf_sink_startofpacket   (led_s1_agent_rsp_fifo_out_startofpacket),                //                .startofpacket
		.rf_sink_endofpacket     (led_s1_agent_rsp_fifo_out_endofpacket),                  //                .endofpacket
		.rf_sink_data            (led_s1_agent_rsp_fifo_out_data),                         //                .data
		.rf_source_ready         (led_s1_agent_rf_source_ready),                           //       rf_source.ready
		.rf_source_valid         (led_s1_agent_rf_source_valid),                           //                .valid
		.rf_source_startofpacket (led_s1_agent_rf_source_startofpacket),                   //                .startofpacket
		.rf_source_endofpacket   (led_s1_agent_rf_source_endofpacket),                     //                .endofpacket
		.rf_source_data          (led_s1_agent_rf_source_data),                            //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (led_s1_agent_rdata_fifo_src_ready),                      //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (led_s1_agent_rdata_fifo_src_valid),                      //                .valid
		.rdata_fifo_src_data     (led_s1_agent_rdata_fifo_src_data),                       //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) led_s1_agent_rsp_fifo (
		.clk               (peri_clk_clk_clk),                                       //       clk.clk
		.reset             (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (led_s1_agent_rf_source_data),                            //        in.data
		.in_valid          (led_s1_agent_rf_source_valid),                           //          .valid
		.in_ready          (led_s1_agent_rf_source_ready),                           //          .ready
		.in_startofpacket  (led_s1_agent_rf_source_startofpacket),                   //          .startofpacket
		.in_endofpacket    (led_s1_agent_rf_source_endofpacket),                     //          .endofpacket
		.out_data          (led_s1_agent_rsp_fifo_out_data),                         //       out.data
		.out_valid         (led_s1_agent_rsp_fifo_out_valid),                        //          .valid
		.out_ready         (led_s1_agent_rsp_fifo_out_ready),                        //          .ready
		.out_startofpacket (led_s1_agent_rsp_fifo_out_startofpacket),                //          .startofpacket
		.out_endofpacket   (led_s1_agent_rsp_fifo_out_endofpacket),                  //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	olive_std_core_mm_interconnect_1_router router (
		.sink_ready         (peripheral_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (peripheral_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (peripheral_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (peripheral_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (peripheral_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                       //       src.ready
		.src_valid          (router_src_valid),                                       //          .valid
		.src_data           (router_src_data),                                        //          .data
		.src_channel        (router_src_channel),                                     //          .channel
		.src_startofpacket  (router_src_startofpacket),                               //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                  //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_001 (
		.sink_ready         (dual_boot_0_avalon_agent_rp_ready),                      //      sink.ready
		.sink_valid         (dual_boot_0_avalon_agent_rp_valid),                      //          .valid
		.sink_data          (dual_boot_0_avalon_agent_rp_data),                       //          .data
		.sink_startofpacket (dual_boot_0_avalon_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (dual_boot_0_avalon_agent_rp_endofpacket),                //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_002 (
		.sink_ready         (pfc_avalon_slave_agent_rp_ready),                        //      sink.ready
		.sink_valid         (pfc_avalon_slave_agent_rp_valid),                        //          .valid
		.sink_data          (pfc_avalon_slave_agent_rp_data),                         //          .data
		.sink_startofpacket (pfc_avalon_slave_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pfc_avalon_slave_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                   //       src.ready
		.src_valid          (router_002_src_valid),                                   //          .valid
		.src_data           (router_002_src_data),                                    //          .data
		.src_channel        (router_002_src_channel),                                 //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_003 (
		.sink_ready         (servo_avalon_slave_agent_rp_ready),                      //      sink.ready
		.sink_valid         (servo_avalon_slave_agent_rp_valid),                      //          .valid
		.sink_data          (servo_avalon_slave_agent_rp_data),                       //          .data
		.sink_startofpacket (servo_avalon_slave_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (servo_avalon_slave_agent_rp_endofpacket),                //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                                   //       src.ready
		.src_valid          (router_003_src_valid),                                   //          .valid
		.src_data           (router_003_src_data),                                    //          .data
		.src_channel        (router_003_src_channel),                                 //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_004 (
		.sink_ready         (chipid_chipid_agent_rp_ready),                           //      sink.ready
		.sink_valid         (chipid_chipid_agent_rp_valid),                           //          .valid
		.sink_data          (chipid_chipid_agent_rp_data),                            //          .data
		.sink_startofpacket (chipid_chipid_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (chipid_chipid_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                   //       src.ready
		.src_valid          (router_004_src_valid),                                   //          .valid
		.src_data           (router_004_src_data),                                    //          .data
		.src_channel        (router_004_src_channel),                                 //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_005 (
		.sink_ready         (sysid_control_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sysid_control_slave_agent_rp_valid),                     //          .valid
		.sink_data          (sysid_control_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (sysid_control_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sysid_control_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                   //       src.ready
		.src_valid          (router_005_src_valid),                                   //          .valid
		.src_data           (router_005_src_data),                                    //          .data
		.src_channel        (router_005_src_channel),                                 //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_006 (
		.sink_ready         (systimer_s1_agent_rp_ready),                             //      sink.ready
		.sink_valid         (systimer_s1_agent_rp_valid),                             //          .valid
		.sink_data          (systimer_s1_agent_rp_data),                              //          .data
		.sink_startofpacket (systimer_s1_agent_rp_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (systimer_s1_agent_rp_endofpacket),                       //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                   //       src.ready
		.src_valid          (router_006_src_valid),                                   //          .valid
		.src_data           (router_006_src_data),                                    //          .data
		.src_channel        (router_006_src_channel),                                 //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_007 (
		.sink_ready         (uart0_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (uart0_s1_agent_rp_valid),                                //          .valid
		.sink_data          (uart0_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (uart0_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (uart0_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                   //       src.ready
		.src_valid          (router_007_src_valid),                                   //          .valid
		.src_data           (router_007_src_data),                                    //          .data
		.src_channel        (router_007_src_channel),                                 //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_008 (
		.sink_ready         (uart1_s1_agent_rp_ready),                                //      sink.ready
		.sink_valid         (uart1_s1_agent_rp_valid),                                //          .valid
		.sink_data          (uart1_s1_agent_rp_data),                                 //          .data
		.sink_startofpacket (uart1_s1_agent_rp_startofpacket),                        //          .startofpacket
		.sink_endofpacket   (uart1_s1_agent_rp_endofpacket),                          //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                   //       src.ready
		.src_valid          (router_008_src_valid),                                   //          .valid
		.src_data           (router_008_src_data),                                    //          .data
		.src_channel        (router_008_src_channel),                                 //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_009 (
		.sink_ready         (spi_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (spi_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (spi_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (spi_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (spi_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                   //       src.ready
		.src_valid          (router_009_src_valid),                                   //          .valid
		.src_data           (router_009_src_data),                                    //          .data
		.src_channel        (router_009_src_channel),                                 //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_010 (
		.sink_ready         (i2c_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (i2c_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (i2c_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (i2c_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (i2c_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                                   //       src.ready
		.src_valid          (router_010_src_valid),                                   //          .valid
		.src_data           (router_010_src_data),                                    //          .data
		.src_channel        (router_010_src_channel),                                 //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_011 (
		.sink_ready         (hostbridge_s1_agent_rp_ready),                           //      sink.ready
		.sink_valid         (hostbridge_s1_agent_rp_valid),                           //          .valid
		.sink_data          (hostbridge_s1_agent_rp_data),                            //          .data
		.sink_startofpacket (hostbridge_s1_agent_rp_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (hostbridge_s1_agent_rp_endofpacket),                     //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                                   //       src.ready
		.src_valid          (router_011_src_valid),                                   //          .valid
		.src_data           (router_011_src_data),                                    //          .data
		.src_channel        (router_011_src_channel),                                 //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_router_001 router_012 (
		.sink_ready         (led_s1_agent_rp_ready),                                  //      sink.ready
		.sink_valid         (led_s1_agent_rp_valid),                                  //          .valid
		.sink_data          (led_s1_agent_rp_data),                                   //          .data
		.sink_startofpacket (led_s1_agent_rp_startofpacket),                          //          .startofpacket
		.sink_endofpacket   (led_s1_agent_rp_endofpacket),                            //          .endofpacket
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                                   //       src.ready
		.src_valid          (router_012_src_valid),                                   //          .valid
		.src_data           (router_012_src_data),                                    //          .data
		.src_channel        (router_012_src_channel),                                 //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                              //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) peripheral_bridge_m0_limiter (
		.clk                    (peri_clk_clk_clk),                                       //       clk.clk
		.reset                  (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                       //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                       //          .valid
		.cmd_sink_data          (router_src_data),                                        //          .data
		.cmd_sink_channel       (router_src_channel),                                     //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                               //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                                 //          .endofpacket
		.cmd_src_ready          (peripheral_bridge_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (peripheral_bridge_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (peripheral_bridge_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (peripheral_bridge_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (peripheral_bridge_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                      //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                      //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                    //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                       //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                              //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                                //          .endofpacket
		.rsp_src_ready          (peripheral_bridge_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (peripheral_bridge_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (peripheral_bridge_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (peripheral_bridge_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (peripheral_bridge_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (peripheral_bridge_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (peripheral_bridge_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	olive_std_core_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                 (peri_clk_clk_clk),                                       //        clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (peripheral_bridge_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (peripheral_bridge_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (peripheral_bridge_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (peripheral_bridge_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (peripheral_bridge_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (peripheral_bridge_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                                   //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                                   //           .valid
		.src0_data           (cmd_demux_src0_data),                                    //           .data
		.src0_channel        (cmd_demux_src0_channel),                                 //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                           //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                             //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                                   //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                                   //           .valid
		.src1_data           (cmd_demux_src1_data),                                    //           .data
		.src1_channel        (cmd_demux_src1_channel),                                 //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                           //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                             //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                                   //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                                   //           .valid
		.src2_data           (cmd_demux_src2_data),                                    //           .data
		.src2_channel        (cmd_demux_src2_channel),                                 //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                           //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                             //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                                   //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                                   //           .valid
		.src3_data           (cmd_demux_src3_data),                                    //           .data
		.src3_channel        (cmd_demux_src3_channel),                                 //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                           //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                             //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                                   //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                                   //           .valid
		.src4_data           (cmd_demux_src4_data),                                    //           .data
		.src4_channel        (cmd_demux_src4_channel),                                 //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                           //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                             //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                                   //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                                   //           .valid
		.src5_data           (cmd_demux_src5_data),                                    //           .data
		.src5_channel        (cmd_demux_src5_channel),                                 //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                           //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                             //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                                   //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                                   //           .valid
		.src6_data           (cmd_demux_src6_data),                                    //           .data
		.src6_channel        (cmd_demux_src6_channel),                                 //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                           //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                             //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                                   //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                                   //           .valid
		.src7_data           (cmd_demux_src7_data),                                    //           .data
		.src7_channel        (cmd_demux_src7_channel),                                 //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                           //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                             //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                                   //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                                   //           .valid
		.src8_data           (cmd_demux_src8_data),                                    //           .data
		.src8_channel        (cmd_demux_src8_channel),                                 //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                           //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                             //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                                   //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                                   //           .valid
		.src9_data           (cmd_demux_src9_data),                                    //           .data
		.src9_channel        (cmd_demux_src9_channel),                                 //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                           //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                             //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                                  //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                                  //           .valid
		.src10_data          (cmd_demux_src10_data),                                   //           .data
		.src10_channel       (cmd_demux_src10_channel),                                //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                          //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                            //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                                  //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                                  //           .valid
		.src11_data          (cmd_demux_src11_data),                                   //           .data
		.src11_channel       (cmd_demux_src11_channel),                                //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                          //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket)                             //           .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                      //       src.ready
		.src_valid           (cmd_mux_src_valid),                                      //          .valid
		.src_data            (cmd_mux_src_data),                                       //          .data
		.src_channel         (cmd_mux_src_channel),                                    //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src0_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_001 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                  //          .valid
		.src_data            (cmd_mux_001_src_data),                                   //          .data
		.src_channel         (cmd_mux_001_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src1_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_002 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                  //          .valid
		.src_data            (cmd_mux_002_src_data),                                   //          .data
		.src_channel         (cmd_mux_002_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src2_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_003 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                  //          .valid
		.src_data            (cmd_mux_003_src_data),                                   //          .data
		.src_channel         (cmd_mux_003_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src3_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_004 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                  //          .valid
		.src_data            (cmd_mux_004_src_data),                                   //          .data
		.src_channel         (cmd_mux_004_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src4_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_005 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                  //          .valid
		.src_data            (cmd_mux_005_src_data),                                   //          .data
		.src_channel         (cmd_mux_005_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src5_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_006 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                  //          .valid
		.src_data            (cmd_mux_006_src_data),                                   //          .data
		.src_channel         (cmd_mux_006_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src6_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_007 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                  //          .valid
		.src_data            (cmd_mux_007_src_data),                                   //          .data
		.src_channel         (cmd_mux_007_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src7_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_008 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                  //          .valid
		.src_data            (cmd_mux_008_src_data),                                   //          .data
		.src_channel         (cmd_mux_008_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src8_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_009 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                  //          .valid
		.src_data            (cmd_mux_009_src_data),                                   //          .data
		.src_channel         (cmd_mux_009_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                                   //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                                   //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                                 //          .channel
		.sink0_data          (cmd_demux_src9_data),                                    //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_010 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                  //          .valid
		.src_data            (cmd_mux_010_src_data),                                   //          .data
		.src_channel         (cmd_mux_010_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                                //          .channel
		.sink0_data          (cmd_demux_src10_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                             //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_cmd_mux cmd_mux_011 (
		.clk                 (peri_clk_clk_clk),                                       //       clk.clk
		.reset               (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                  //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                  //          .valid
		.src_data            (cmd_mux_011_src_data),                                   //          .data
		.src_channel         (cmd_mux_011_src_channel),                                //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                          //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                            //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                                //          .channel
		.sink0_data          (cmd_demux_src11_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                             //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                   //      sink.ready
		.sink_channel       (router_001_src_channel),                                 //          .channel
		.sink_data          (router_001_src_data),                                    //          .data
		.sink_startofpacket (router_001_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_001_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                   //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                   //          .valid
		.src0_data          (rsp_demux_src0_data),                                    //          .data
		.src0_channel       (rsp_demux_src0_channel),                                 //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                              //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_001 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                   //      sink.ready
		.sink_channel       (router_002_src_channel),                                 //          .channel
		.sink_data          (router_002_src_data),                                    //          .data
		.sink_startofpacket (router_002_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_002_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_002 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                   //      sink.ready
		.sink_channel       (router_003_src_channel),                                 //          .channel
		.sink_data          (router_003_src_data),                                    //          .data
		.sink_startofpacket (router_003_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_003_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_003 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                   //      sink.ready
		.sink_channel       (router_004_src_channel),                                 //          .channel
		.sink_data          (router_004_src_data),                                    //          .data
		.sink_startofpacket (router_004_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_004_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_004 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                   //      sink.ready
		.sink_channel       (router_005_src_channel),                                 //          .channel
		.sink_data          (router_005_src_data),                                    //          .data
		.sink_startofpacket (router_005_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_005_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_005 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                   //      sink.ready
		.sink_channel       (router_006_src_channel),                                 //          .channel
		.sink_data          (router_006_src_data),                                    //          .data
		.sink_startofpacket (router_006_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_006_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_005_src0_data),                                //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_006 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                   //      sink.ready
		.sink_channel       (router_007_src_channel),                                 //          .channel
		.sink_data          (router_007_src_data),                                    //          .data
		.sink_startofpacket (router_007_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_007_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_006_src0_data),                                //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_007 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                   //      sink.ready
		.sink_channel       (router_008_src_channel),                                 //          .channel
		.sink_data          (router_008_src_data),                                    //          .data
		.sink_startofpacket (router_008_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_008_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_007_src0_data),                                //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_008 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                   //      sink.ready
		.sink_channel       (router_009_src_channel),                                 //          .channel
		.sink_data          (router_009_src_data),                                    //          .data
		.sink_startofpacket (router_009_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_009_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_008_src0_data),                                //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_009 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                                   //      sink.ready
		.sink_channel       (router_010_src_channel),                                 //          .channel
		.sink_data          (router_010_src_data),                                    //          .data
		.sink_startofpacket (router_010_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_010_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_009_src0_data),                                //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_010 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                                   //      sink.ready
		.sink_channel       (router_011_src_channel),                                 //          .channel
		.sink_data          (router_011_src_data),                                    //          .data
		.sink_startofpacket (router_011_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_011_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_010_src0_data),                                //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_demux rsp_demux_011 (
		.clk                (peri_clk_clk_clk),                                       //       clk.clk
		.reset              (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                                   //      sink.ready
		.sink_channel       (router_012_src_channel),                                 //          .channel
		.sink_data          (router_012_src_data),                                    //          .data
		.sink_startofpacket (router_012_src_startofpacket),                           //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                             //          .endofpacket
		.sink_valid         (router_012_src_valid),                                   //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                               //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                               //          .valid
		.src0_data          (rsp_demux_011_src0_data),                                //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                             //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                       //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                  (peri_clk_clk_clk),                                       //       clk.clk
		.reset                (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                      //       src.ready
		.src_valid            (rsp_mux_src_valid),                                      //          .valid
		.src_data             (rsp_mux_src_data),                                       //          .data
		.src_channel          (rsp_mux_src_channel),                                    //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                              //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                                   //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                                   //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                                 //          .channel
		.sink0_data           (rsp_demux_src0_data),                                    //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                           //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                             //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                               //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                               //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                             //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                       //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                         //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                               //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                               //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                             //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                       //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                         //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                               //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                               //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                             //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                       //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                         //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                               //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                               //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                             //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                       //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                         //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                               //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                               //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                             //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                       //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                         //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                               //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                               //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                             //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                       //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                         //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                               //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                               //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                             //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                       //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                         //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                               //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                               //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                             //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                       //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                         //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                               //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                               //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                             //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                       //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                         //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                               //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                               //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                             //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                       //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                         //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                               //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                               //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                             //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                                //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                       //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket)                          //          .endofpacket
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (dual_boot_0_avalon_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (dual_boot_0_avalon_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (dual_boot_0_avalon_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                           //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                          //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                          //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                           //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pfc_avalon_slave_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (pfc_avalon_slave_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (pfc_avalon_slave_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (servo_avalon_slave_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (servo_avalon_slave_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (servo_avalon_slave_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (chipid_chipid_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (chipid_chipid_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (chipid_chipid_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sysid_control_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (sysid_control_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (sysid_control_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (systimer_s1_agent_rdata_fifo_src_data),                  //     in_0.data
		.in_0_valid     (systimer_s1_agent_rdata_fifo_src_valid),                 //         .valid
		.in_0_ready     (systimer_s1_agent_rdata_fifo_src_ready),                 //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart0_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (uart0_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (uart0_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (uart1_s1_agent_rdata_fifo_src_data),                     //     in_0.data
		.in_0_valid     (uart1_s1_agent_rdata_fifo_src_valid),                    //         .valid
		.in_0_ready     (uart1_s1_agent_rdata_fifo_src_ready),                    //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (spi_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (spi_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (spi_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (i2c_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (i2c_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (i2c_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hostbridge_s1_agent_rdata_fifo_src_data),                //     in_0.data
		.in_0_valid     (hostbridge_s1_agent_rdata_fifo_src_valid),               //         .valid
		.in_0_ready     (hostbridge_s1_agent_rdata_fifo_src_ready),               //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                       //         .error
	);

	olive_std_core_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (peri_clk_clk_clk),                                       // in_clk_0.clk
		.in_rst_0_reset (peripheral_bridge_m0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (led_s1_agent_rdata_fifo_src_data),                       //     in_0.data
		.in_0_valid     (led_s1_agent_rdata_fifo_src_valid),                      //         .valid
		.in_0_ready     (led_s1_agent_rdata_fifo_src_ready),                      //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                       //         .error
	);

endmodule
